{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,O,C,E,E,A,a,O,Q,A,Y,O,O,S,O,Q,K,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,K,mB,C,C,G,Q,G,G,M,C,E,I,G,C,C,E,C,I,E,O,G,C,C,E,C,E,C,K,G,Q,G,G,G,Q,I,C,C,O,C,C,E,C,Q,S,G,C,E,I,E,G,Q,G,M,A,C,I,E,C,E,E,E,C,S,G,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,C,C,S,E,C,E,I,C,G,E,I,C,O,E,I,C,Q,C,C,C,E,gB,C,E,E,O,E,E,Q,E,E,M,E,E,O,E,E,S,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,Q,C,E,C,E,A,E,O,e,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,G,E,G,E,O,K,E,C,C,G,E,G,E,C,I,G,E,E,A,C,U,O,S,A,a,O,O,O,Q,G,A,Y,O,Q,O,I,O,W,O,E,G,G,C,I,C,E,C,E,C,C,E,C,Q,C,S,O,C,M,C,O,E,I,c,Q,kDCAA,WAAA,QAAA,a,kB,c,e,YACA,YAAA,QAAA,0BAGA,IAAM,SAAW,IAAI,OAAO,cACtB,YAAc,IAAI,KAAK,cAAc,cACrC,gBAAkB,CAAC,EAAE,SAAW,YAAc,SAAW,YAAc,EAAE,CAAC,CAAC,AACjF,CAAA,SAAS,eAAe,aAAa,UAAY,gBAEjD,IAAI,UAAJ,IAAA,IAAA,QAAA,qBACM,MAAQ,IAAI,YAAA,KAAK,CACnB,IAAK,CAAC,UAAU,CAChB,MAAO,CAAA,CACX,GA0BA,SAAS,UAMwB,IALjC,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,YAAY,EAAE,WAAW,EAAE,CAC7E,EAAE,EAAE,IAAI,EAAE,UAAU,E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","sources":["<anon>","assets/gameAndState.js","node_modules/mousetrap/mousetrap.js","node_modules/howler/src/howler.core.js","node_modules/@parcel/runtime-js/lib/runtime-cd597ada5f19d047.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/transformer-js/src/esmodule-helpers.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        this\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"6QSGR\":[function(require,module,exports) {\nvar parcelHelpers = require(\"@parcel/transformer-js/src/esmodule-helpers.js\");\nvar _mousetrap = require(\"mousetrap\");\nvar _mousetrapDefault = parcelHelpers.interopDefault(_mousetrap);\nvar _howlerCore = require(\"howler/src/howler.core\");\n// Hydrate the number of years experience\nconst thisYear = new Date().getFullYear();\nconst careerStart = new Date(\"2015-01-01\").getFullYear();\nconst yearsExperience = `${thisYear > careerStart ? thisYear - careerStart : 6}+`;\ndocument.getElementById(\"years_exp\").innerText = yearsExperience;\nlet soundFile = new URL(require(\"f12731979a961039\"));\nconst sound = new (0, _howlerCore.Howl)({\n    src: [\n        soundFile\n    ],\n    html5: true\n});\nsound.volume(0.4);\n// combinations\n(0, _mousetrapDefault.default).bind(\"command+option+1\", function() {\n    toggleGame();\n    return false;\n});\n// combinations\n(0, _mousetrapDefault.default).bind(\"ctrl+option+1\", function() {\n    toggleGame();\n    return false;\n});\n(0, _mousetrapDefault.default).bind(\"space\", function(e1) {\n    if (e1.preventDefault) e1.preventDefault();\n    else // internet explorer\n    e1.returnValue = false;\n});\nfunction runtime() {\n    R = 1152, I = 1134, O = 36, T = 0, G = [], a = [], m = [], e = [], s = 32, H = \"innerHTML\", N = setTimeout, o = (i1, b1, c1)=>i1.substring(b1, c1), onkeydown = (e1)=>V(\"1----0-2\"[e1.keyCode - s]), ontouchstart = (t1)=>V(W(t1.changedTouches.item(0).screenX / screen.width * 3)), Y = (m1, a1)=>{\n        a1.map((i1)=>{\n            h = o(h, 0, i1) + m1 + o(h, i1 + 1, f.length);\n        });\n    }, C = 0, L = 0;\n    M = (_1)=>(W = Math.floor)(Math.random() * _1);\n    Q = (P1, b1)=>Array(b1 + 1).join(P1), f = Q(\" \", R), p = 3, N(l = \"A=A.map(j=>((j+=O)>R)?M(O):j==I&&L&&p--&&j||j);v()&&N(l,S)\", S = 64);\n    for(A = []; C < R;)C = A[A.length - 1] || 0, A.push(C + M(s) + S);\n    P = [\n        \"~(t=\",\n        '.indexOf(k))?(n[H]=(++T+\"\").fontcolor(\"E35252\"),',\n        \".splice(t,1)):\"\n    ], i = \":S9S08W5W06S5_04T8S3R4T02T;Q<S01SJR02RKR03RKR04R7/5/5/7R05R7/5/5/4S06R7/5/4S1S07S6/5Z08S1Z3T09U:S0<S6S0?V0AR\".split(0), N(g = 'j=[];while(k=G.pop()){k-=O,eval(P.join(\"e\")+P.join(\"m\")+\"(k>0)?j.push(k):0\");if(~(z=a.indexOf(k)))a.splice(z,1)}G=j;q();v()&&N(g,s)', s), q = (_1)=>{\n        h = f, D = [\n            A,\n            [\n                I\n            ],\n            e,\n            m,\n            a,\n            G\n        ];\n        for(F in J = \"*A#\\\\ |\")Y(J[F], D[F]);\n        for(_1 = O + 1, z = O; z < R / O * _1; z += _1)h = o(h, 0, z) + \"\\n\" + o(h, z);\n        b[H] = !v() ? \"win!\" : h, K[H] = Q(\"A\", p > 0 ? p : (T = 0, d(), p = 3));\n    }, d = (_)=>{\n        e = [], m = [], a = [], r = 3 * O;\n        for (c of i){\n            w = r;\n            for(u in c){\n                if ((U = c[u]) == \"/\") m.push(w), x = 1;\n                else {\n                    x = U.charCodeAt(0) - 48, E = x < s ? \"a\" : (x -= s) && \"e\";\n                    for(y = w; y < w + x; y++)+u && eval(E + \".push(y)\");\n                }\n                w += x;\n            }\n            r += O;\n        }\n    }, V = (e1)=>N([\n            \"I=Math.max(R-36,I-1)\",\n            \"G.push(I)\",\n            \"I=Math.min(R-1,I+1)\"\n        ][e1], q(), L = 1), v = (_1)=>T != 150;\n    q(d()) // Brandon Freitag, (c) 2017, freitagbr.github.io/ritopls\n    ;\n}\nfunction toggleGame() {\n    sound.play();\n    const treeElem1 = document.getElementById(\"tree-output\");\n    const oElem1 = document.getElementById(\"game\");\n    if (oElem1.classList.contains(\"hidden\")) {\n        treeElem1.classList.add(\"hidden\");\n        runtime();\n        oElem1.classList.remove(\"hidden\");\n        oElem1.classList.remove(\"absolute\");\n    } else {\n        treeElem1.classList.toggle(\"hidden\");\n        oElem1.classList.toggle(\"hidden\");\n        N = ()=>{};\n    }\n}\ndocument.getElementById(\"egg\").addEventListener(\"click\", toggleGame);\n\n},{\"mousetrap\":\"4HrYA\",\"howler/src/howler.core\":\"82oki\",\"f12731979a961039\":\"jMxs5\",\"@parcel/transformer-js/src/esmodule-helpers.js\":\"k3151\"}],\"4HrYA\":[function(require,module,exports) {\n/*global define:false */ /**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */ (function(window1, document1, undefined) {\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window1) return;\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */ var _MAP = {\n        8: \"backspace\",\n        9: \"tab\",\n        13: \"enter\",\n        16: \"shift\",\n        17: \"ctrl\",\n        18: \"alt\",\n        20: \"capslock\",\n        27: \"esc\",\n        32: \"space\",\n        33: \"pageup\",\n        34: \"pagedown\",\n        35: \"end\",\n        36: \"home\",\n        37: \"left\",\n        38: \"up\",\n        39: \"right\",\n        40: \"down\",\n        45: \"ins\",\n        46: \"del\",\n        91: \"meta\",\n        93: \"meta\",\n        224: \"meta\"\n    };\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */ var _KEYCODE_MAP = {\n        106: \"*\",\n        107: \"+\",\n        109: \"-\",\n        110: \".\",\n        111: \"/\",\n        186: \";\",\n        187: \"=\",\n        188: \",\",\n        189: \"-\",\n        190: \".\",\n        191: \"/\",\n        192: \"`\",\n        219: \"[\",\n        220: \"\\\\\",\n        221: \"]\",\n        222: \"'\"\n    };\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */ var _SHIFT_MAP = {\n        \"~\": \"`\",\n        \"!\": \"1\",\n        \"@\": \"2\",\n        \"#\": \"3\",\n        \"$\": \"4\",\n        \"%\": \"5\",\n        \"^\": \"6\",\n        \"&\": \"7\",\n        \"*\": \"8\",\n        \"(\": \"9\",\n        \")\": \"0\",\n        \"_\": \"-\",\n        \"+\": \"=\",\n        \":\": \";\",\n        '\"': \"'\",\n        \"<\": \",\",\n        \">\": \".\",\n        \"?\": \"/\",\n        \"|\": \"\\\\\"\n    };\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */ var _SPECIAL_ALIASES = {\n        \"option\": \"alt\",\n        \"command\": \"meta\",\n        \"return\": \"enter\",\n        \"escape\": \"esc\",\n        \"plus\": \"+\",\n        \"mod\": /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? \"meta\" : \"ctrl\"\n    };\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */ var _REVERSE_MAP;\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */ for(var i = 1; i < 20; ++i)_MAP[111 + i] = \"f\" + i;\n    /**\n     * loop through to map numbers on the numeric keypad\n     */ for(i = 0; i <= 9; ++i)// This needs to use a string cause otherwise since 0 is falsey\n    // mousetrap will never fire for numpad 0 pressed as part of a keydown\n    // event.\n    //\n    // @see https://github.com/ccampbell/mousetrap/pull/258\n    _MAP[i + 96] = i.toString();\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */ function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n        object.attachEvent(\"on\" + type, callback);\n    }\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */ function _characterFromEvent(e) {\n        // for keypress events we should return the character as is\n        if (e.type == \"keypress\") {\n            var character = String.fromCharCode(e.which);\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) character = character.toLowerCase();\n            return character;\n        }\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) return _MAP[e.which];\n        if (_KEYCODE_MAP[e.which]) return _KEYCODE_MAP[e.which];\n        // if it is not in the special map\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */ function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(\",\") === modifiers2.sort().join(\",\");\n    }\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */ function _eventModifiers(e) {\n        var modifiers = [];\n        if (e.shiftKey) modifiers.push(\"shift\");\n        if (e.altKey) modifiers.push(\"alt\");\n        if (e.ctrlKey) modifiers.push(\"ctrl\");\n        if (e.metaKey) modifiers.push(\"meta\");\n        return modifiers;\n    }\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */ function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n        e.returnValue = false;\n    }\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */ function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n        e.cancelBubble = true;\n    }\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */ function _isModifier(key) {\n        return key == \"shift\" || key == \"ctrl\" || key == \"alt\" || key == \"meta\";\n    }\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */ function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for(var key in _MAP){\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) continue;\n                if (_MAP.hasOwnProperty(key)) _REVERSE_MAP[_MAP[key]] = key;\n            }\n        }\n        return _REVERSE_MAP;\n    }\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */ function _pickBestAction(key, modifiers, action) {\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) action = _getReverseMap()[key] ? \"keydown\" : \"keypress\";\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == \"keypress\" && modifiers.length) action = \"keydown\";\n        return action;\n    }\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */ function _keysFromString(combination) {\n        if (combination === \"+\") return [\n            \"+\"\n        ];\n        combination = combination.replace(/\\+{2}/g, \"+plus\");\n        return combination.split(\"+\");\n    }\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */ function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n        for(i = 0; i < keys.length; ++i){\n            key = keys[i];\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) key = _SPECIAL_ALIASES[key];\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != \"keypress\" && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push(\"shift\");\n            }\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) modifiers.push(key);\n        }\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document1) return false;\n        if (element === ancestor) return true;\n        return _belongsTo(element.parentNode, ancestor);\n    }\n    function Mousetrap(targetElement) {\n        var self = this;\n        targetElement = targetElement || document1;\n        if (!(self instanceof Mousetrap)) return new Mousetrap(targetElement);\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */ self.target = targetElement;\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */ self._callbacks = {};\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */ self._directMap = {};\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */ var _sequenceLevels = {};\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */ var _resetTimer;\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */ var _ignoreNextKeyup = false;\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */ var _ignoreNextKeypress = false;\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */ var _nextExpectedAction = false;\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */ function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n            var activeSequences = false, key;\n            for(key in _sequenceLevels){\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n            if (!activeSequences) _nextExpectedAction = false;\n        }\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */ function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) return [];\n            // if a modifier key is coming up on its own we should allow it\n            if (action == \"keyup\" && _isModifier(character)) modifiers = [\n                character\n            ];\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for(i = 0; i < self._callbacks[character].length; ++i){\n                callback = self._callbacks[character][i];\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) continue;\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) continue;\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if (action == \"keypress\" && !e.metaKey && !e.ctrlKey || _modifiersMatch(modifiers, callback.modifiers)) {\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) self._callbacks[character].splice(i, 1);\n                    matches.push(callback);\n                }\n            }\n            return matches;\n        }\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */ function _fireCallback(callback, e, combo, sequence) {\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) return;\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */ self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for(i = 0; i < callbacks.length; ++i)if (callbacks[i].seq) maxLevel = Math.max(maxLevel, callbacks[i].level);\n            // loop through matching callbacks for this key event\n            for(i = 0; i < callbacks.length; ++i){\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) continue;\n                    processedSequenceCallback = true;\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n            }\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == \"keypress\" && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) _resetSequences(doNotReset);\n            _ignoreNextKeypress = processedSequenceCallback && e.type == \"keydown\";\n        };\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */ function _handleKeyEvent(e) {\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== \"number\") e.which = e.keyCode;\n            var character = _characterFromEvent(e);\n            // no character found then stop\n            if (!character) return;\n            // need to use === for the character check because the character can be 0\n            if (e.type == \"keyup\" && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */ function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */ function _bindSequence(combo, keys, callback, action) {\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */ function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */ function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== \"keyup\") _ignoreNextKeyup = _characterFromEvent(e);\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for(var i = 0; i < keys.length; ++i){\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */ function _bindSingle(combination, callback, action, sequenceName, level) {\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + \":\" + action] = callback;\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, \" \");\n            var sequence = combination.split(\" \");\n            var info;\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n            info = _getKeyInfo(combination, action);\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {\n                type: info.action\n            }, sequenceName, combination, level);\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? \"unshift\" : \"push\"]({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */ self._bindMultiple = function(combinations, callback, action) {\n            for(var i = 0; i < combinations.length; ++i)_bindSingle(combinations[i], callback, action);\n        };\n        // start!\n        _addEvent(targetElement, \"keypress\", _handleKeyEvent);\n        _addEvent(targetElement, \"keydown\", _handleKeyEvent);\n        _addEvent(targetElement, \"keyup\", _handleKeyEvent);\n    }\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */ Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [\n            keys\n        ];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */ Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */ Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + \":\" + action]) self._directMap[keys + \":\" + action]({}, keys);\n        return self;\n    };\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */ Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */ Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((\" \" + element.className + \" \").indexOf(\" mousetrap \") > -1) return false;\n        if (_belongsTo(element, self.target)) return false;\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if (\"composedPath\" in e && typeof e.composedPath === \"function\") {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) element = initialEventTarget;\n        }\n        // stop for input, select, and textarea\n        return element.tagName == \"INPUT\" || element.tagName == \"SELECT\" || element.tagName == \"TEXTAREA\" || element.isContentEditable;\n    };\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */ Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n    /**\n     * allow custom key mappings\n     */ Mousetrap.addKeycodes = function(object) {\n        for(var key in object)if (object.hasOwnProperty(key)) _MAP[key] = object[key];\n        _REVERSE_MAP = null;\n    };\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */ Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document1);\n        for(var method in documentMousetrap)if (method.charAt(0) !== \"_\") Mousetrap[method] = function(method) {\n            return function() {\n                return documentMousetrap[method].apply(documentMousetrap, arguments);\n            };\n        }(method);\n    };\n    Mousetrap.init();\n    // expose mousetrap to the global object\n    window1.Mousetrap = Mousetrap;\n    // expose as a common js module\n    if (0, module.exports) module.exports = Mousetrap;\n    // expose mousetrap as an AMD module\n    if (typeof define === \"function\" && define.amd) define(function() {\n        return Mousetrap;\n    });\n})(typeof window !== \"undefined\" ? window : null, typeof window !== \"undefined\" ? document : null);\n\n},{}],\"82oki\":[function(require,module,exports) {\nvar global = arguments[3];\n/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */ (function() {\n    \"use strict\";\n    /** Global Methods **/ /***************************************************************************/ /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */ var HowlerGlobal = function() {\n        this.init();\n    };\n    HowlerGlobal.prototype = {\n        /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */ init: function() {\n            var self = this || Howler;\n            // Create a global ID counter.\n            self._counter = 1000;\n            // Pool of unlocked HTML5 Audio objects.\n            self._html5AudioPool = [];\n            self.html5PoolSize = 10;\n            // Internal properties.\n            self._codecs = {};\n            self._howls = [];\n            self._muted = false;\n            self._volume = 1;\n            self._canPlayEvent = \"canplaythrough\";\n            self._navigator = typeof window !== \"undefined\" && window.navigator ? window.navigator : null;\n            // Public properties.\n            self.masterGain = null;\n            self.noAudio = false;\n            self.usingWebAudio = true;\n            self.autoSuspend = true;\n            self.ctx = null;\n            // Set to false to disable the auto audio unlocker.\n            self.autoUnlock = true;\n            // Setup the various state values for global tracking.\n            self._setup();\n            return self;\n        },\n        /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */ volume: function(vol) {\n            var self = this || Howler;\n            vol = parseFloat(vol);\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!self.ctx) setupAudioContext();\n            if (typeof vol !== \"undefined\" && vol >= 0 && vol <= 1) {\n                self._volume = vol;\n                // Don't update any of the nodes if we are muted.\n                if (self._muted) return self;\n                // When using Web Audio, we just need to adjust the master gain.\n                if (self.usingWebAudio) self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n                // Loop through and change volume for all HTML5 audio nodes.\n                for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                    // Get all of the sounds in this Howl group.\n                    var ids = self._howls[i]._getSoundIds();\n                    // Loop through all sounds and change the volumes.\n                    for(var j = 0; j < ids.length; j++){\n                        var sound = self._howls[i]._soundById(ids[j]);\n                        if (sound && sound._node) sound._node.volume = sound._volume * vol;\n                    }\n                }\n                return self;\n            }\n            return self._volume;\n        },\n        /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */ mute: function(muted) {\n            var self = this || Howler;\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!self.ctx) setupAudioContext();\n            self._muted = muted;\n            // With Web Audio, we just need to mute the master gain.\n            if (self.usingWebAudio) self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n            // Loop through and mute all HTML5 Audio nodes.\n            for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                // Get all of the sounds in this Howl group.\n                var ids = self._howls[i]._getSoundIds();\n                // Loop through all sounds and mark the audio node as muted.\n                for(var j = 0; j < ids.length; j++){\n                    var sound = self._howls[i]._soundById(ids[j]);\n                    if (sound && sound._node) sound._node.muted = muted ? true : sound._muted;\n                }\n            }\n            return self;\n        },\n        /**\n     * Handle stopping all sounds globally.\n     */ stop: function() {\n            var self = this || Howler;\n            // Loop through all Howls and stop them.\n            for(var i = 0; i < self._howls.length; i++)self._howls[i].stop();\n            return self;\n        },\n        /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */ unload: function() {\n            var self = this || Howler;\n            for(var i = self._howls.length - 1; i >= 0; i--)self._howls[i].unload();\n            // Create a new AudioContext to make sure it is fully reset.\n            if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== \"undefined\") {\n                self.ctx.close();\n                self.ctx = null;\n                setupAudioContext();\n            }\n            return self;\n        },\n        /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */ codecs: function(ext) {\n            return (this || Howler)._codecs[ext.replace(/^x-/, \"\")];\n        },\n        /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */ _setup: function() {\n            var self = this || Howler;\n            // Keeps track of the suspend/resume state of the AudioContext.\n            self.state = self.ctx ? self.ctx.state || \"suspended\" : \"suspended\";\n            // Automatically begin the 30-second suspend process\n            self._autoSuspend();\n            // Check if audio is available.\n            if (!self.usingWebAudio) {\n                // No audio is available on this system if noAudio is set to true.\n                if (typeof Audio !== \"undefined\") try {\n                    var test = new Audio();\n                    // Check if the canplaythrough event is available.\n                    if (typeof test.oncanplaythrough === \"undefined\") self._canPlayEvent = \"canplay\";\n                } catch (e) {\n                    self.noAudio = true;\n                }\n                else self.noAudio = true;\n            }\n            // Test to make sure audio isn't disabled in Internet Explorer.\n            try {\n                var test = new Audio();\n                if (test.muted) self.noAudio = true;\n            } catch (e) {}\n            // Check for supported codecs.\n            if (!self.noAudio) self._setupCodecs();\n            return self;\n        },\n        /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */ _setupCodecs: function() {\n            var self = this || Howler;\n            var audioTest = null;\n            // Must wrap in a try/catch because IE11 in server mode throws an error.\n            try {\n                audioTest = typeof Audio !== \"undefined\" ? new Audio() : null;\n            } catch (err) {\n                return self;\n            }\n            if (!audioTest || typeof audioTest.canPlayType !== \"function\") return self;\n            var mpegTest = audioTest.canPlayType(\"audio/mpeg;\").replace(/^no$/, \"\");\n            // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n            var ua = self._navigator ? self._navigator.userAgent : \"\";\n            var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n            var isOldOpera = checkOpera && parseInt(checkOpera[0].split(\"/\")[1], 10) < 33;\n            var checkSafari = ua.indexOf(\"Safari\") !== -1 && ua.indexOf(\"Chrome\") === -1;\n            var safariVersion = ua.match(/Version\\/(.*?) /);\n            var isOldSafari = checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15;\n            self._codecs = {\n                mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType(\"audio/mp3;\").replace(/^no$/, \"\"))),\n                mpeg: !!mpegTest,\n                opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, \"\"),\n                ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, \"\"),\n                wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType(\"audio/wav\")).replace(/^no$/, \"\"),\n                aac: !!audioTest.canPlayType(\"audio/aac;\").replace(/^no$/, \"\"),\n                caf: !!audioTest.canPlayType(\"audio/x-caf;\").replace(/^no$/, \"\"),\n                m4a: !!(audioTest.canPlayType(\"audio/x-m4a;\") || audioTest.canPlayType(\"audio/m4a;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                m4b: !!(audioTest.canPlayType(\"audio/x-m4b;\") || audioTest.canPlayType(\"audio/m4b;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                mp4: !!(audioTest.canPlayType(\"audio/x-mp4;\") || audioTest.canPlayType(\"audio/mp4;\") || audioTest.canPlayType(\"audio/aac;\")).replace(/^no$/, \"\"),\n                weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, \"\")),\n                dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, \"\"),\n                flac: !!(audioTest.canPlayType(\"audio/x-flac;\") || audioTest.canPlayType(\"audio/flac;\")).replace(/^no$/, \"\")\n            };\n            return self;\n        },\n        /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */ _unlockAudio: function() {\n            var self = this || Howler;\n            // Only run this if Web Audio is supported and it hasn't already been unlocked.\n            if (self._audioUnlocked || !self.ctx) return;\n            self._audioUnlocked = false;\n            self.autoUnlock = false;\n            // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n            // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n            // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n            if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n                self._mobileUnloaded = true;\n                self.unload();\n            }\n            // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n            // http://stackoverflow.com/questions/24119684\n            self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n            // Call this method on touch start to create and play a buffer,\n            // then check if the audio actually played to determine if\n            // audio has now been unlocked on iOS, Android, etc.\n            var unlock = function(e) {\n                // Create a pool of unlocked HTML5 Audio objects that can\n                // be used for playing sounds without user interaction. HTML5\n                // Audio objects must be individually unlocked, as opposed\n                // to the WebAudio API which only needs a single activation.\n                // This must occur before WebAudio setup or the source.onended\n                // event will not fire.\n                while(self._html5AudioPool.length < self.html5PoolSize)try {\n                    var audioNode = new Audio();\n                    // Mark this Audio object as unlocked to ensure it can get returned\n                    // to the unlocked pool when released.\n                    audioNode._unlocked = true;\n                    // Add the audio node to the pool.\n                    self._releaseHtml5Audio(audioNode);\n                } catch (e) {\n                    self.noAudio = true;\n                    break;\n                }\n                // Loop through any assigned audio nodes and unlock them.\n                for(var i = 0; i < self._howls.length; i++)if (!self._howls[i]._webAudio) {\n                    // Get all of the sounds in this Howl group.\n                    var ids = self._howls[i]._getSoundIds();\n                    // Loop through all sounds and unlock the audio nodes.\n                    for(var j = 0; j < ids.length; j++){\n                        var sound = self._howls[i]._soundById(ids[j]);\n                        if (sound && sound._node && !sound._node._unlocked) {\n                            sound._node._unlocked = true;\n                            sound._node.load();\n                        }\n                    }\n                }\n                // Fix Android can not play in suspend state.\n                self._autoResume();\n                // Create an empty buffer.\n                var source = self.ctx.createBufferSource();\n                source.buffer = self._scratchBuffer;\n                source.connect(self.ctx.destination);\n                // Play the empty buffer.\n                if (typeof source.start === \"undefined\") source.noteOn(0);\n                else source.start(0);\n                // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n                if (typeof self.ctx.resume === \"function\") self.ctx.resume();\n                // Setup a timeout to check that we are unlocked on the next event loop.\n                source.onended = function() {\n                    source.disconnect(0);\n                    // Update the unlocked state and prevent this check from happening again.\n                    self._audioUnlocked = true;\n                    // Remove the touch start listener.\n                    document.removeEventListener(\"touchstart\", unlock, true);\n                    document.removeEventListener(\"touchend\", unlock, true);\n                    document.removeEventListener(\"click\", unlock, true);\n                    document.removeEventListener(\"keydown\", unlock, true);\n                    // Let all sounds know that audio has been unlocked.\n                    for(var i = 0; i < self._howls.length; i++)self._howls[i]._emit(\"unlock\");\n                };\n            };\n            // Setup a touch start listener to attempt an unlock in.\n            document.addEventListener(\"touchstart\", unlock, true);\n            document.addEventListener(\"touchend\", unlock, true);\n            document.addEventListener(\"click\", unlock, true);\n            document.addEventListener(\"keydown\", unlock, true);\n            return self;\n        },\n        /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */ _obtainHtml5Audio: function() {\n            var self = this || Howler;\n            // Return the next object from the pool if one exists.\n            if (self._html5AudioPool.length) return self._html5AudioPool.pop();\n            //.Check if the audio is locked and throw a warning.\n            var testPlay = new Audio().play();\n            if (testPlay && typeof Promise !== \"undefined\" && (testPlay instanceof Promise || typeof testPlay.then === \"function\")) testPlay.catch(function() {\n                console.warn(\"HTML5 Audio pool exhausted, returning potentially locked audio object.\");\n            });\n            return new Audio();\n        },\n        /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */ _releaseHtml5Audio: function(audio) {\n            var self = this || Howler;\n            // Don't add audio to the pool if we don't know if it has been unlocked.\n            if (audio._unlocked) self._html5AudioPool.push(audio);\n            return self;\n        },\n        /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */ _autoSuspend: function() {\n            var self = this;\n            if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === \"undefined\" || !Howler.usingWebAudio) return;\n            // Check if any sounds are playing.\n            for(var i = 0; i < self._howls.length; i++){\n                if (self._howls[i]._webAudio) for(var j = 0; j < self._howls[i]._sounds.length; j++){\n                    if (!self._howls[i]._sounds[j]._paused) return self;\n                }\n            }\n            if (self._suspendTimer) clearTimeout(self._suspendTimer);\n            // If no sound has played after 30 seconds, suspend the context.\n            self._suspendTimer = setTimeout(function() {\n                if (!self.autoSuspend) return;\n                self._suspendTimer = null;\n                self.state = \"suspending\";\n                // Handle updating the state of the audio context after suspending.\n                var handleSuspension = function() {\n                    self.state = \"suspended\";\n                    if (self._resumeAfterSuspend) {\n                        delete self._resumeAfterSuspend;\n                        self._autoResume();\n                    }\n                };\n                // Either the state gets suspended or it is interrupted.\n                // Either way, we need to update the state to suspended.\n                self.ctx.suspend().then(handleSuspension, handleSuspension);\n            }, 30000);\n            return self;\n        },\n        /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */ _autoResume: function() {\n            var self = this;\n            if (!self.ctx || typeof self.ctx.resume === \"undefined\" || !Howler.usingWebAudio) return;\n            if (self.state === \"running\" && self.ctx.state !== \"interrupted\" && self._suspendTimer) {\n                clearTimeout(self._suspendTimer);\n                self._suspendTimer = null;\n            } else if (self.state === \"suspended\" || self.state === \"running\" && self.ctx.state === \"interrupted\") {\n                self.ctx.resume().then(function() {\n                    self.state = \"running\";\n                    // Emit to all Howls that the audio has resumed.\n                    for(var i = 0; i < self._howls.length; i++)self._howls[i]._emit(\"resume\");\n                });\n                if (self._suspendTimer) {\n                    clearTimeout(self._suspendTimer);\n                    self._suspendTimer = null;\n                }\n            } else if (self.state === \"suspending\") self._resumeAfterSuspend = true;\n            return self;\n        }\n    };\n    // Setup the global audio controller.\n    var Howler = new HowlerGlobal();\n    /** Group Methods **/ /***************************************************************************/ /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */ var Howl = function(o) {\n        var self = this;\n        // Throw an error if no source is provided.\n        if (!o.src || o.src.length === 0) {\n            console.error(\"An array of source files must be passed with any new Howl.\");\n            return;\n        }\n        self.init(o);\n    };\n    Howl.prototype = {\n        /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */ init: function(o) {\n            var self = this;\n            // If we don't have an AudioContext created yet, run the setup.\n            if (!Howler.ctx) setupAudioContext();\n            // Setup user-defined default properties.\n            self._autoplay = o.autoplay || false;\n            self._format = typeof o.format !== \"string\" ? o.format : [\n                o.format\n            ];\n            self._html5 = o.html5 || false;\n            self._muted = o.mute || false;\n            self._loop = o.loop || false;\n            self._pool = o.pool || 5;\n            self._preload = typeof o.preload === \"boolean\" || o.preload === \"metadata\" ? o.preload : true;\n            self._rate = o.rate || 1;\n            self._sprite = o.sprite || {};\n            self._src = typeof o.src !== \"string\" ? o.src : [\n                o.src\n            ];\n            self._volume = o.volume !== undefined ? o.volume : 1;\n            self._xhr = {\n                method: o.xhr && o.xhr.method ? o.xhr.method : \"GET\",\n                headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n                withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false\n            };\n            // Setup all other default properties.\n            self._duration = 0;\n            self._state = \"unloaded\";\n            self._sounds = [];\n            self._endTimers = {};\n            self._queue = [];\n            self._playLock = false;\n            // Setup event listeners.\n            self._onend = o.onend ? [\n                {\n                    fn: o.onend\n                }\n            ] : [];\n            self._onfade = o.onfade ? [\n                {\n                    fn: o.onfade\n                }\n            ] : [];\n            self._onload = o.onload ? [\n                {\n                    fn: o.onload\n                }\n            ] : [];\n            self._onloaderror = o.onloaderror ? [\n                {\n                    fn: o.onloaderror\n                }\n            ] : [];\n            self._onplayerror = o.onplayerror ? [\n                {\n                    fn: o.onplayerror\n                }\n            ] : [];\n            self._onpause = o.onpause ? [\n                {\n                    fn: o.onpause\n                }\n            ] : [];\n            self._onplay = o.onplay ? [\n                {\n                    fn: o.onplay\n                }\n            ] : [];\n            self._onstop = o.onstop ? [\n                {\n                    fn: o.onstop\n                }\n            ] : [];\n            self._onmute = o.onmute ? [\n                {\n                    fn: o.onmute\n                }\n            ] : [];\n            self._onvolume = o.onvolume ? [\n                {\n                    fn: o.onvolume\n                }\n            ] : [];\n            self._onrate = o.onrate ? [\n                {\n                    fn: o.onrate\n                }\n            ] : [];\n            self._onseek = o.onseek ? [\n                {\n                    fn: o.onseek\n                }\n            ] : [];\n            self._onunlock = o.onunlock ? [\n                {\n                    fn: o.onunlock\n                }\n            ] : [];\n            self._onresume = [];\n            // Web Audio or HTML5 Audio?\n            self._webAudio = Howler.usingWebAudio && !self._html5;\n            // Automatically try to enable audio.\n            if (typeof Howler.ctx !== \"undefined\" && Howler.ctx && Howler.autoUnlock) Howler._unlockAudio();\n            // Keep track of this Howl group in the global controller.\n            Howler._howls.push(self);\n            // If they selected autoplay, add a play event to the load queue.\n            if (self._autoplay) self._queue.push({\n                event: \"play\",\n                action: function() {\n                    self.play();\n                }\n            });\n            // Load the source file unless otherwise specified.\n            if (self._preload && self._preload !== \"none\") self.load();\n            return self;\n        },\n        /**\n     * Load the audio file.\n     * @return {Howler}\n     */ load: function() {\n            var self = this;\n            var url = null;\n            // If no audio is available, quit immediately.\n            if (Howler.noAudio) {\n                self._emit(\"loaderror\", null, \"No audio support.\");\n                return;\n            }\n            // Make sure our source is in an array.\n            if (typeof self._src === \"string\") self._src = [\n                self._src\n            ];\n            // Loop through the sources and pick the first one that is compatible.\n            for(var i = 0; i < self._src.length; i++){\n                var ext, str;\n                if (self._format && self._format[i]) // If an extension was specified, use that instead.\n                ext = self._format[i];\n                else {\n                    // Make sure the source is a string.\n                    str = self._src[i];\n                    if (typeof str !== \"string\") {\n                        self._emit(\"loaderror\", null, \"Non-string found in selected audio sources - ignoring.\");\n                        continue;\n                    }\n                    // Extract the file extension from the URL or base64 data URI.\n                    ext = /^data:audio\\/([^;,]+);/i.exec(str);\n                    if (!ext) ext = /\\.([^.]+)$/.exec(str.split(\"?\", 1)[0]);\n                    if (ext) ext = ext[1].toLowerCase();\n                }\n                // Log a warning if no extension was found.\n                if (!ext) console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n                // Check if this extension is available.\n                if (ext && Howler.codecs(ext)) {\n                    url = self._src[i];\n                    break;\n                }\n            }\n            if (!url) {\n                self._emit(\"loaderror\", null, \"No codec support for selected audio sources.\");\n                return;\n            }\n            self._src = url;\n            self._state = \"loading\";\n            // If the hosting page is HTTPS and the source isn't,\n            // drop down to HTML5 Audio to avoid Mixed Content errors.\n            if (window.location.protocol === \"https:\" && url.slice(0, 5) === \"http:\") {\n                self._html5 = true;\n                self._webAudio = false;\n            }\n            // Create a new sound object and add it to the pool.\n            new Sound(self);\n            // Load and decode the audio data for playback.\n            if (self._webAudio) loadBuffer(self);\n            return self;\n        },\n        /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */ play: function(sprite, internal) {\n            var self = this;\n            var id = null;\n            // Determine if a sprite, sound id or nothing was passed\n            if (typeof sprite === \"number\") {\n                id = sprite;\n                sprite = null;\n            } else if (typeof sprite === \"string\" && self._state === \"loaded\" && !self._sprite[sprite]) // If the passed sprite doesn't exist, do nothing.\n            return null;\n            else if (typeof sprite === \"undefined\") {\n                // Use the default sound sprite (plays the full audio length).\n                sprite = \"__default\";\n                // Check if there is a single paused sound that isn't ended.\n                // If there is, play that sound. If not, continue as usual.\n                if (!self._playLock) {\n                    var num = 0;\n                    for(var i = 0; i < self._sounds.length; i++)if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n                        num++;\n                        id = self._sounds[i]._id;\n                    }\n                    if (num === 1) sprite = null;\n                    else id = null;\n                }\n            }\n            // Get the selected node, or get one from the pool.\n            var sound = id ? self._soundById(id) : self._inactiveSound();\n            // If the sound doesn't exist, do nothing.\n            if (!sound) return null;\n            // Select the sprite definition.\n            if (id && !sprite) sprite = sound._sprite || \"__default\";\n            // If the sound hasn't loaded, we must wait to get the audio's duration.\n            // We also need to wait to make sure we don't run into race conditions with\n            // the order of function calls.\n            if (self._state !== \"loaded\") {\n                // Set the sprite value on this sound.\n                sound._sprite = sprite;\n                // Mark this sound as not ended in case another sound is played before this one loads.\n                sound._ended = false;\n                // Add the sound to the queue to be played on load.\n                var soundId = sound._id;\n                self._queue.push({\n                    event: \"play\",\n                    action: function() {\n                        self.play(soundId);\n                    }\n                });\n                return soundId;\n            }\n            // Don't play the sound if an id was passed and it is already playing.\n            if (id && !sound._paused) {\n                // Trigger the play event, in order to keep iterating through queue.\n                if (!internal) self._loadQueue(\"play\");\n                return sound._id;\n            }\n            // Make sure the AudioContext isn't suspended, and resume it if it is.\n            if (self._webAudio) Howler._autoResume();\n            // Determine how long to play for and where to start playing.\n            var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n            var duration = Math.max(0, (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000 - seek);\n            var timeout = duration * 1000 / Math.abs(sound._rate);\n            var start = self._sprite[sprite][0] / 1000;\n            var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n            sound._sprite = sprite;\n            // Mark the sound as ended instantly so that this async playback\n            // doesn't get grabbed by another call to play while this one waits to start.\n            sound._ended = false;\n            // Update the parameters of the sound.\n            var setParams = function() {\n                sound._paused = false;\n                sound._seek = seek;\n                sound._start = start;\n                sound._stop = stop;\n                sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n            };\n            // End the sound instantly if seek is at the end.\n            if (seek >= stop) {\n                self._ended(sound);\n                return;\n            }\n            // Begin the actual playback.\n            var node = sound._node;\n            if (self._webAudio) {\n                // Fire this when the sound is ready to play to begin Web Audio playback.\n                var playWebAudio = function() {\n                    self._playLock = false;\n                    setParams();\n                    self._refreshBuffer(sound);\n                    // Setup the playback params.\n                    var vol = sound._muted || self._muted ? 0 : sound._volume;\n                    node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n                    sound._playStart = Howler.ctx.currentTime;\n                    // Play the sound using the supported method.\n                    if (typeof node.bufferSource.start === \"undefined\") sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n                    else sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n                    // Start a new timer if none is present.\n                    if (timeout !== Infinity) self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n                    if (!internal) setTimeout(function() {\n                        self._emit(\"play\", sound._id);\n                        self._loadQueue();\n                    }, 0);\n                };\n                if (Howler.state === \"running\" && Howler.ctx.state !== \"interrupted\") playWebAudio();\n                else {\n                    self._playLock = true;\n                    // Wait for the audio context to resume before playing.\n                    self.once(\"resume\", playWebAudio);\n                    // Cancel the end timer.\n                    self._clearTimer(sound._id);\n                }\n            } else {\n                // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n                var playHtml5 = function() {\n                    node.currentTime = seek;\n                    node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n                    node.volume = sound._volume * Howler.volume();\n                    node.playbackRate = sound._rate;\n                    // Some browsers will throw an error if this is called without user interaction.\n                    try {\n                        var play = node.play();\n                        // Support older browsers that don't support promises, and thus don't have this issue.\n                        if (play && typeof Promise !== \"undefined\" && (play instanceof Promise || typeof play.then === \"function\")) {\n                            // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n                            self._playLock = true;\n                            // Set param values immediately.\n                            setParams();\n                            // Releases the lock and executes queued actions.\n                            play.then(function() {\n                                self._playLock = false;\n                                node._unlocked = true;\n                                if (!internal) self._emit(\"play\", sound._id);\n                                else self._loadQueue();\n                            }).catch(function() {\n                                self._playLock = false;\n                                self._emit(\"playerror\", sound._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\");\n                                // Reset the ended and paused values.\n                                sound._ended = true;\n                                sound._paused = true;\n                            });\n                        } else if (!internal) {\n                            self._playLock = false;\n                            setParams();\n                            self._emit(\"play\", sound._id);\n                        }\n                        // Setting rate before playing won't work in IE, so we set it again here.\n                        node.playbackRate = sound._rate;\n                        // If the node is still paused, then we can assume there was a playback issue.\n                        if (node.paused) {\n                            self._emit(\"playerror\", sound._id, \"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.\");\n                            return;\n                        }\n                        // Setup the end timer on sprites or listen for the ended event.\n                        if (sprite !== \"__default\" || sound._loop) self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n                        else {\n                            self._endTimers[sound._id] = function() {\n                                // Fire ended on this audio node.\n                                self._ended(sound);\n                                // Clear this listener.\n                                node.removeEventListener(\"ended\", self._endTimers[sound._id], false);\n                            };\n                            node.addEventListener(\"ended\", self._endTimers[sound._id], false);\n                        }\n                    } catch (err) {\n                        self._emit(\"playerror\", sound._id, err);\n                    }\n                };\n                // If this is streaming audio, make sure the src is set and load again.\n                if (node.src === \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\") {\n                    node.src = self._src;\n                    node.load();\n                }\n                // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n                var loadedNoReadyState = window && window.ejecta || !node.readyState && Howler._navigator.isCocoonJS;\n                if (node.readyState >= 3 || loadedNoReadyState) playHtml5();\n                else {\n                    self._playLock = true;\n                    self._state = \"loading\";\n                    var listener = function() {\n                        self._state = \"loaded\";\n                        // Begin playback.\n                        playHtml5();\n                        // Clear this listener.\n                        node.removeEventListener(Howler._canPlayEvent, listener, false);\n                    };\n                    node.addEventListener(Howler._canPlayEvent, listener, false);\n                    // Cancel the end timer.\n                    self._clearTimer(sound._id);\n                }\n            }\n            return sound._id;\n        },\n        /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */ pause: function(id) {\n            var self = this;\n            // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"pause\",\n                    action: function() {\n                        self.pause(id);\n                    }\n                });\n                return self;\n            }\n            // If no id is passed, get all ID's to be paused.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Clear the end timer.\n                self._clearTimer(ids[i]);\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound && !sound._paused) {\n                    // Reset the seek position.\n                    sound._seek = self.seek(ids[i]);\n                    sound._rateSeek = 0;\n                    sound._paused = true;\n                    // Stop currently running fades.\n                    self._stopFade(ids[i]);\n                    if (sound._node) {\n                        if (self._webAudio) {\n                            // Make sure the sound has been created.\n                            if (!sound._node.bufferSource) continue;\n                            if (typeof sound._node.bufferSource.stop === \"undefined\") sound._node.bufferSource.noteOff(0);\n                            else sound._node.bufferSource.stop(0);\n                            // Clean up the buffer source.\n                            self._cleanBuffer(sound._node);\n                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) sound._node.pause();\n                    }\n                }\n                // Fire the pause event, unless `true` is passed as the 2nd argument.\n                if (!arguments[1]) self._emit(\"pause\", sound ? sound._id : null);\n            }\n            return self;\n        },\n        /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */ stop: function(id, internal) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to stop when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"stop\",\n                    action: function() {\n                        self.stop(id);\n                    }\n                });\n                return self;\n            }\n            // If no id is passed, get all ID's to be stopped.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Clear the end timer.\n                self._clearTimer(ids[i]);\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound) {\n                    // Reset the seek position.\n                    sound._seek = sound._start || 0;\n                    sound._rateSeek = 0;\n                    sound._paused = true;\n                    sound._ended = true;\n                    // Stop currently running fades.\n                    self._stopFade(ids[i]);\n                    if (sound._node) {\n                        if (self._webAudio) // Make sure the sound's AudioBufferSourceNode has been created.\n                        {\n                            if (sound._node.bufferSource) {\n                                if (typeof sound._node.bufferSource.stop === \"undefined\") sound._node.bufferSource.noteOff(0);\n                                else sound._node.bufferSource.stop(0);\n                                // Clean up the buffer source.\n                                self._cleanBuffer(sound._node);\n                            }\n                        } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n                            sound._node.currentTime = sound._start || 0;\n                            sound._node.pause();\n                            // If this is a live stream, stop download once the audio is stopped.\n                            if (sound._node.duration === Infinity) self._clearSound(sound._node);\n                        }\n                    }\n                    if (!internal) self._emit(\"stop\", sound._id);\n                }\n            }\n            return self;\n        },\n        /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */ mute: function(muted, id) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to mute when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"mute\",\n                    action: function() {\n                        self.mute(muted, id);\n                    }\n                });\n                return self;\n            }\n            // If applying mute/unmute to all sounds, update the group's value.\n            if (typeof id === \"undefined\") {\n                if (typeof muted === \"boolean\") self._muted = muted;\n                else return self._muted;\n            }\n            // If no id is passed, get all ID's to be muted.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                if (sound) {\n                    sound._muted = muted;\n                    // Cancel active fade and set the volume to the end value.\n                    if (sound._interval) self._stopFade(sound._id);\n                    if (self._webAudio && sound._node) sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n                    else if (sound._node) sound._node.muted = Howler._muted ? true : muted;\n                    self._emit(\"mute\", sound._id);\n                }\n            }\n            return self;\n        },\n        /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */ volume: function() {\n            var self = this;\n            var args = arguments;\n            var vol, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // Return the value of the groups' volume.\n            return self._volume;\n            else if (args.length === 1 || args.length === 2 && typeof args[1] === \"undefined\") {\n                // First check if this is an ID, and if not, assume it is a new volume.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else vol = parseFloat(args[0]);\n            } else if (args.length >= 2) {\n                vol = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // Update the volume or return the current volume.\n            var sound;\n            if (typeof vol !== \"undefined\" && vol >= 0 && vol <= 1) {\n                // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n                if (self._state !== \"loaded\" || self._playLock) {\n                    self._queue.push({\n                        event: \"volume\",\n                        action: function() {\n                            self.volume.apply(self, args);\n                        }\n                    });\n                    return self;\n                }\n                // Set the group volume.\n                if (typeof id === \"undefined\") self._volume = vol;\n                // Update one or all volumes.\n                id = self._getSoundIds(id);\n                for(var i = 0; i < id.length; i++){\n                    // Get the sound.\n                    sound = self._soundById(id[i]);\n                    if (sound) {\n                        sound._volume = vol;\n                        // Stop currently running fades.\n                        if (!args[2]) self._stopFade(id[i]);\n                        if (self._webAudio && sound._node && !sound._muted) sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n                        else if (sound._node && !sound._muted) sound._node.volume = vol * Howler.volume();\n                        self._emit(\"volume\", sound._id);\n                    }\n                }\n            } else {\n                sound = id ? self._soundById(id) : self._sounds[0];\n                return sound ? sound._volume : 0;\n            }\n            return self;\n        },\n        /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */ fade: function(from, to, len, id) {\n            var self = this;\n            // If the sound hasn't loaded, add it to the load queue to fade when capable.\n            if (self._state !== \"loaded\" || self._playLock) {\n                self._queue.push({\n                    event: \"fade\",\n                    action: function() {\n                        self.fade(from, to, len, id);\n                    }\n                });\n                return self;\n            }\n            // Make sure the to/from/len values are numbers.\n            from = Math.min(Math.max(0, parseFloat(from)), 1);\n            to = Math.min(Math.max(0, parseFloat(to)), 1);\n            len = parseFloat(len);\n            // Set the volume to the start position.\n            self.volume(from, id);\n            // Fade the volume of one or all sounds.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                // Get the sound.\n                var sound = self._soundById(ids[i]);\n                // Create a linear fade or fall back to timeouts with HTML5 Audio.\n                if (sound) {\n                    // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n                    if (!id) self._stopFade(ids[i]);\n                    // If we are using Web Audio, let the native methods do the actual fade.\n                    if (self._webAudio && !sound._muted) {\n                        var currentTime = Howler.ctx.currentTime;\n                        var end = currentTime + len / 1000;\n                        sound._volume = from;\n                        sound._node.gain.setValueAtTime(from, currentTime);\n                        sound._node.gain.linearRampToValueAtTime(to, end);\n                    }\n                    self._startFadeInterval(sound, from, to, len, ids[i], typeof id === \"undefined\");\n                }\n            }\n            return self;\n        },\n        /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */ _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n            var self = this;\n            var vol = from;\n            var diff = to - from;\n            var steps = Math.abs(diff / 0.01);\n            var stepLen = Math.max(4, steps > 0 ? len / steps : len);\n            var lastTick = Date.now();\n            // Store the value being faded to.\n            sound._fadeTo = to;\n            // Update the volume value on each interval tick.\n            sound._interval = setInterval(function() {\n                // Update the volume based on the time since the last tick.\n                var tick = (Date.now() - lastTick) / len;\n                lastTick = Date.now();\n                vol += diff * tick;\n                // Round to within 2 decimal points.\n                vol = Math.round(vol * 100) / 100;\n                // Make sure the volume is in the right bounds.\n                if (diff < 0) vol = Math.max(to, vol);\n                else vol = Math.min(to, vol);\n                // Change the volume.\n                if (self._webAudio) sound._volume = vol;\n                else self.volume(vol, sound._id, true);\n                // Set the group's volume.\n                if (isGroup) self._volume = vol;\n                // When the fade is complete, stop it and fire event.\n                if (to < from && vol <= to || to > from && vol >= to) {\n                    clearInterval(sound._interval);\n                    sound._interval = null;\n                    sound._fadeTo = null;\n                    self.volume(to, sound._id);\n                    self._emit(\"fade\", sound._id);\n                }\n            }, stepLen);\n        },\n        /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */ _stopFade: function(id) {\n            var self = this;\n            var sound = self._soundById(id);\n            if (sound && sound._interval) {\n                if (self._webAudio) sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n                clearInterval(sound._interval);\n                sound._interval = null;\n                self.volume(sound._fadeTo, id);\n                sound._fadeTo = null;\n                self._emit(\"fade\", id);\n            }\n            return self;\n        },\n        /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */ loop: function() {\n            var self = this;\n            var args = arguments;\n            var loop, id, sound;\n            // Determine the values for loop and id.\n            if (args.length === 0) // Return the grou's loop value.\n            return self._loop;\n            else if (args.length === 1) {\n                if (typeof args[0] === \"boolean\") {\n                    loop = args[0];\n                    self._loop = loop;\n                } else {\n                    // Return this sound's loop value.\n                    sound = self._soundById(parseInt(args[0], 10));\n                    return sound ? sound._loop : false;\n                }\n            } else if (args.length === 2) {\n                loop = args[0];\n                id = parseInt(args[1], 10);\n            }\n            // If no id is passed, get all ID's to be looped.\n            var ids = self._getSoundIds(id);\n            for(var i = 0; i < ids.length; i++){\n                sound = self._soundById(ids[i]);\n                if (sound) {\n                    sound._loop = loop;\n                    if (self._webAudio && sound._node && sound._node.bufferSource) {\n                        sound._node.bufferSource.loop = loop;\n                        if (loop) {\n                            sound._node.bufferSource.loopStart = sound._start || 0;\n                            sound._node.bufferSource.loopEnd = sound._stop;\n                            // If playing, restart playback to ensure looping updates.\n                            if (self.playing(ids[i])) {\n                                self.pause(ids[i], true);\n                                self.play(ids[i], true);\n                            }\n                        }\n                    }\n                }\n            }\n            return self;\n        },\n        /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */ rate: function() {\n            var self = this;\n            var args = arguments;\n            var rate, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // We will simply return the current rate of the first node.\n            id = self._sounds[0]._id;\n            else if (args.length === 1) {\n                // First check if this is an ID, and if not, assume it is a new rate value.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else rate = parseFloat(args[0]);\n            } else if (args.length === 2) {\n                rate = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // Update the playback rate or return the current value.\n            var sound;\n            if (typeof rate === \"number\") {\n                // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n                if (self._state !== \"loaded\" || self._playLock) {\n                    self._queue.push({\n                        event: \"rate\",\n                        action: function() {\n                            self.rate.apply(self, args);\n                        }\n                    });\n                    return self;\n                }\n                // Set the group rate.\n                if (typeof id === \"undefined\") self._rate = rate;\n                // Update one or all volumes.\n                id = self._getSoundIds(id);\n                for(var i = 0; i < id.length; i++){\n                    // Get the sound.\n                    sound = self._soundById(id[i]);\n                    if (sound) {\n                        // Keep track of our position when the rate changed and update the playback\n                        // start position so we can properly adjust the seek position for time elapsed.\n                        if (self.playing(id[i])) {\n                            sound._rateSeek = self.seek(id[i]);\n                            sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n                        }\n                        sound._rate = rate;\n                        // Change the playback rate.\n                        if (self._webAudio && sound._node && sound._node.bufferSource) sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n                        else if (sound._node) sound._node.playbackRate = rate;\n                        // Reset the timers.\n                        var seek = self.seek(id[i]);\n                        var duration = (self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000 - seek;\n                        var timeout = duration * 1000 / Math.abs(sound._rate);\n                        // Start a new end timer if sound is already playing.\n                        if (self._endTimers[id[i]] || !sound._paused) {\n                            self._clearTimer(id[i]);\n                            self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n                        }\n                        self._emit(\"rate\", sound._id);\n                    }\n                }\n            } else {\n                sound = self._soundById(id);\n                return sound ? sound._rate : self._rate;\n            }\n            return self;\n        },\n        /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */ seek: function() {\n            var self = this;\n            var args = arguments;\n            var seek, id;\n            // Determine the values based on arguments.\n            if (args.length === 0) // We will simply return the current position of the first node.\n            {\n                if (self._sounds.length) id = self._sounds[0]._id;\n            } else if (args.length === 1) {\n                // First check if this is an ID, and if not, assume it is a new seek position.\n                var ids = self._getSoundIds();\n                var index = ids.indexOf(args[0]);\n                if (index >= 0) id = parseInt(args[0], 10);\n                else if (self._sounds.length) {\n                    id = self._sounds[0]._id;\n                    seek = parseFloat(args[0]);\n                }\n            } else if (args.length === 2) {\n                seek = parseFloat(args[0]);\n                id = parseInt(args[1], 10);\n            }\n            // If there is no ID, bail out.\n            if (typeof id === \"undefined\") return 0;\n            // If the sound hasn't loaded, add it to the load queue to seek when capable.\n            if (typeof seek === \"number\" && (self._state !== \"loaded\" || self._playLock)) {\n                self._queue.push({\n                    event: \"seek\",\n                    action: function() {\n                        self.seek.apply(self, args);\n                    }\n                });\n                return self;\n            }\n            // Get the sound.\n            var sound = self._soundById(id);\n            if (sound) {\n                if (typeof seek === \"number\" && seek >= 0) {\n                    // Pause the sound and update position for restarting playback.\n                    var playing = self.playing(id);\n                    if (playing) self.pause(id, true);\n                    // Move the position of the track and cancel timer.\n                    sound._seek = seek;\n                    sound._ended = false;\n                    self._clearTimer(id);\n                    // Update the seek position for HTML5 Audio.\n                    if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) sound._node.currentTime = seek;\n                    // Seek and emit when ready.\n                    var seekAndEmit = function() {\n                        // Restart the playback if the sound was playing.\n                        if (playing) self.play(id, true);\n                        self._emit(\"seek\", id);\n                    };\n                    // Wait for the play lock to be unset before emitting (HTML5 Audio).\n                    if (playing && !self._webAudio) {\n                        var emitSeek = function() {\n                            if (!self._playLock) seekAndEmit();\n                            else setTimeout(emitSeek, 0);\n                        };\n                        setTimeout(emitSeek, 0);\n                    } else seekAndEmit();\n                } else {\n                    if (self._webAudio) {\n                        var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n                        var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n                        return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n                    } else return sound._node.currentTime;\n                }\n            }\n            return self;\n        },\n        /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */ playing: function(id) {\n            var self = this;\n            // Check the passed sound ID (if any).\n            if (typeof id === \"number\") {\n                var sound = self._soundById(id);\n                return sound ? !sound._paused : false;\n            }\n            // Otherwise, loop through all sounds and check if any are playing.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (!self._sounds[i]._paused) return true;\n            }\n            return false;\n        },\n        /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */ duration: function(id) {\n            var self = this;\n            var duration = self._duration;\n            // If we pass an ID, get the sound and return the sprite length.\n            var sound = self._soundById(id);\n            if (sound) duration = self._sprite[sound._sprite][1] / 1000;\n            return duration;\n        },\n        /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */ state: function() {\n            return this._state;\n        },\n        /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */ unload: function() {\n            var self = this;\n            // Stop playing any active sounds.\n            var sounds = self._sounds;\n            for(var i = 0; i < sounds.length; i++){\n                // Stop the sound if it is currently playing.\n                if (!sounds[i]._paused) self.stop(sounds[i]._id);\n                // Remove the source or disconnect.\n                if (!self._webAudio) {\n                    // Set the source to 0-second silence to stop any downloading (except in IE).\n                    self._clearSound(sounds[i]._node);\n                    // Remove any event listeners.\n                    sounds[i]._node.removeEventListener(\"error\", sounds[i]._errorFn, false);\n                    sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n                    sounds[i]._node.removeEventListener(\"ended\", sounds[i]._endFn, false);\n                    // Release the Audio object back to the pool.\n                    Howler._releaseHtml5Audio(sounds[i]._node);\n                }\n                // Empty out all of the nodes.\n                delete sounds[i]._node;\n                // Make sure all timers are cleared out.\n                self._clearTimer(sounds[i]._id);\n            }\n            // Remove the references in the global Howler object.\n            var index = Howler._howls.indexOf(self);\n            if (index >= 0) Howler._howls.splice(index, 1);\n            // Delete this sound from the cache (if no other Howl is using it).\n            var remCache = true;\n            for(i = 0; i < Howler._howls.length; i++)if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n                remCache = false;\n                break;\n            }\n            if (cache && remCache) delete cache[self._src];\n            // Clear global errors.\n            Howler.noAudio = false;\n            // Clear out `self`.\n            self._state = \"unloaded\";\n            self._sounds = [];\n            self = null;\n            return null;\n        },\n        /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */ on: function(event, fn, id, once) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            if (typeof fn === \"function\") events.push(once ? {\n                id: id,\n                fn: fn,\n                once: once\n            } : {\n                id: id,\n                fn: fn\n            });\n            return self;\n        },\n        /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */ off: function(event, fn, id) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            var i = 0;\n            // Allow passing just an event and ID.\n            if (typeof fn === \"number\") {\n                id = fn;\n                fn = null;\n            }\n            if (fn || id) // Loop through event store and remove the passed function.\n            for(i = 0; i < events.length; i++){\n                var isId = id === events[i].id;\n                if (fn === events[i].fn && isId || !fn && isId) {\n                    events.splice(i, 1);\n                    break;\n                }\n            }\n            else if (event) // Clear out all events of this type.\n            self[\"_on\" + event] = [];\n            else {\n                // Clear out all events of every type.\n                var keys = Object.keys(self);\n                for(i = 0; i < keys.length; i++)if (keys[i].indexOf(\"_on\") === 0 && Array.isArray(self[keys[i]])) self[keys[i]] = [];\n            }\n            return self;\n        },\n        /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */ once: function(event, fn, id) {\n            var self = this;\n            // Setup the event listener.\n            self.on(event, fn, id, 1);\n            return self;\n        },\n        /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */ _emit: function(event, id, msg) {\n            var self = this;\n            var events = self[\"_on\" + event];\n            // Loop through event store and fire all functions.\n            for(var i = events.length - 1; i >= 0; i--)// Only fire the listener if the correct ID is used.\n            if (!events[i].id || events[i].id === id || event === \"load\") {\n                setTimeout((function(fn) {\n                    fn.call(this, id, msg);\n                }).bind(self, events[i].fn), 0);\n                // If this event was setup with `once`, remove it.\n                if (events[i].once) self.off(event, events[i].fn, events[i].id);\n            }\n            // Pass the event type into load queue so that it can continue stepping.\n            self._loadQueue(event);\n            return self;\n        },\n        /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */ _loadQueue: function(event) {\n            var self = this;\n            if (self._queue.length > 0) {\n                var task = self._queue[0];\n                // Remove this task if a matching event was passed.\n                if (task.event === event) {\n                    self._queue.shift();\n                    self._loadQueue();\n                }\n                // Run the task if no event type is passed.\n                if (!event) task.action();\n            }\n            return self;\n        },\n        /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */ _ended: function(sound) {\n            var self = this;\n            var sprite = sound._sprite;\n            // If we are using IE and there was network latency we may be clipping\n            // audio before it completes playing. Lets check the node to make sure it\n            // believes it has completed, before ending the playback.\n            if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n                setTimeout(self._ended.bind(self, sound), 100);\n                return self;\n            }\n            // Should this sound loop?\n            var loop = !!(sound._loop || self._sprite[sprite][2]);\n            // Fire the ended event.\n            self._emit(\"end\", sound._id);\n            // Restart the playback for HTML5 Audio loop.\n            if (!self._webAudio && loop) self.stop(sound._id, true).play(sound._id);\n            // Restart this timer if on a Web Audio loop.\n            if (self._webAudio && loop) {\n                self._emit(\"play\", sound._id);\n                sound._seek = sound._start || 0;\n                sound._rateSeek = 0;\n                sound._playStart = Howler.ctx.currentTime;\n                var timeout = (sound._stop - sound._start) * 1000 / Math.abs(sound._rate);\n                self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n            // Mark the node as paused.\n            if (self._webAudio && !loop) {\n                sound._paused = true;\n                sound._ended = true;\n                sound._seek = sound._start || 0;\n                sound._rateSeek = 0;\n                self._clearTimer(sound._id);\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n                // Attempt to auto-suspend AudioContext if no sounds are still playing.\n                Howler._autoSuspend();\n            }\n            // When using a sprite, end the track.\n            if (!self._webAudio && !loop) self.stop(sound._id, true);\n            return self;\n        },\n        /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */ _clearTimer: function(id) {\n            var self = this;\n            if (self._endTimers[id]) {\n                // Clear the timeout or remove the ended listener.\n                if (typeof self._endTimers[id] !== \"function\") clearTimeout(self._endTimers[id]);\n                else {\n                    var sound = self._soundById(id);\n                    if (sound && sound._node) sound._node.removeEventListener(\"ended\", self._endTimers[id], false);\n                }\n                delete self._endTimers[id];\n            }\n            return self;\n        },\n        /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */ _soundById: function(id) {\n            var self = this;\n            // Loop through all sounds and find the one with this ID.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (id === self._sounds[i]._id) return self._sounds[i];\n            }\n            return null;\n        },\n        /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */ _inactiveSound: function() {\n            var self = this;\n            self._drain();\n            // Find the first inactive node to recycle.\n            for(var i = 0; i < self._sounds.length; i++){\n                if (self._sounds[i]._ended) return self._sounds[i].reset();\n            }\n            // If no inactive node was found, create a new one.\n            return new Sound(self);\n        },\n        /**\n     * Drain excess inactive sounds from the pool.\n     */ _drain: function() {\n            var self = this;\n            var limit = self._pool;\n            var cnt = 0;\n            var i = 0;\n            // If there are less sounds than the max pool size, we are done.\n            if (self._sounds.length < limit) return;\n            // Count the number of inactive sounds.\n            for(i = 0; i < self._sounds.length; i++)if (self._sounds[i]._ended) cnt++;\n            // Remove excess inactive sounds, going in reverse order.\n            for(i = self._sounds.length - 1; i >= 0; i--){\n                if (cnt <= limit) return;\n                if (self._sounds[i]._ended) {\n                    // Disconnect the audio source when using Web Audio.\n                    if (self._webAudio && self._sounds[i]._node) self._sounds[i]._node.disconnect(0);\n                    // Remove sounds until we have the pool size.\n                    self._sounds.splice(i, 1);\n                    cnt--;\n                }\n            }\n        },\n        /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */ _getSoundIds: function(id) {\n            var self = this;\n            if (typeof id === \"undefined\") {\n                var ids = [];\n                for(var i = 0; i < self._sounds.length; i++)ids.push(self._sounds[i]._id);\n                return ids;\n            } else return [\n                id\n            ];\n        },\n        /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */ _refreshBuffer: function(sound) {\n            var self = this;\n            // Setup the buffer source for playback.\n            sound._node.bufferSource = Howler.ctx.createBufferSource();\n            sound._node.bufferSource.buffer = cache[self._src];\n            // Connect to the correct node.\n            if (sound._panner) sound._node.bufferSource.connect(sound._panner);\n            else sound._node.bufferSource.connect(sound._node);\n            // Setup looping and playback rate.\n            sound._node.bufferSource.loop = sound._loop;\n            if (sound._loop) {\n                sound._node.bufferSource.loopStart = sound._start || 0;\n                sound._node.bufferSource.loopEnd = sound._stop || 0;\n            }\n            sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n            return self;\n        },\n        /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */ _cleanBuffer: function(node) {\n            var self = this;\n            var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf(\"Apple\") >= 0;\n            if (Howler._scratchBuffer && node.bufferSource) {\n                node.bufferSource.onended = null;\n                node.bufferSource.disconnect(0);\n                if (isIOS) try {\n                    node.bufferSource.buffer = Howler._scratchBuffer;\n                } catch (e) {}\n            }\n            node.bufferSource = null;\n            return self;\n        },\n        /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */ _clearSound: function(node) {\n            var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n            if (!checkIE) node.src = \"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA\";\n        }\n    };\n    /** Single Sound Methods **/ /***************************************************************************/ /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */ var Sound = function(howl) {\n        this._parent = howl;\n        this.init();\n    };\n    Sound.prototype = {\n        /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */ init: function() {\n            var self = this;\n            var parent = self._parent;\n            // Setup the default parameters.\n            self._muted = parent._muted;\n            self._loop = parent._loop;\n            self._volume = parent._volume;\n            self._rate = parent._rate;\n            self._seek = 0;\n            self._paused = true;\n            self._ended = true;\n            self._sprite = \"__default\";\n            // Generate a unique ID for this sound.\n            self._id = ++Howler._counter;\n            // Add itself to the parent's pool.\n            parent._sounds.push(self);\n            // Create the new node.\n            self.create();\n            return self;\n        },\n        /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */ create: function() {\n            var self = this;\n            var parent = self._parent;\n            var volume = Howler._muted || self._muted || self._parent._muted ? 0 : self._volume;\n            if (parent._webAudio) {\n                // Create the gain node for controlling volume (the source will connect to this).\n                self._node = typeof Howler.ctx.createGain === \"undefined\" ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n                self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n                self._node.paused = true;\n                self._node.connect(Howler.masterGain);\n            } else if (!Howler.noAudio) {\n                // Get an unlocked Audio object from the pool.\n                self._node = Howler._obtainHtml5Audio();\n                // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n                self._errorFn = self._errorListener.bind(self);\n                self._node.addEventListener(\"error\", self._errorFn, false);\n                // Listen for 'canplaythrough' event to let us know the sound is ready.\n                self._loadFn = self._loadListener.bind(self);\n                self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n                // Listen for the 'ended' event on the sound to account for edge-case where\n                // a finite sound has a duration of Infinity.\n                self._endFn = self._endListener.bind(self);\n                self._node.addEventListener(\"ended\", self._endFn, false);\n                // Setup the new audio node.\n                self._node.src = parent._src;\n                self._node.preload = parent._preload === true ? \"auto\" : parent._preload;\n                self._node.volume = volume * Howler.volume();\n                // Begin loading the source.\n                self._node.load();\n            }\n            return self;\n        },\n        /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */ reset: function() {\n            var self = this;\n            var parent = self._parent;\n            // Reset all of the parameters of this sound.\n            self._muted = parent._muted;\n            self._loop = parent._loop;\n            self._volume = parent._volume;\n            self._rate = parent._rate;\n            self._seek = 0;\n            self._rateSeek = 0;\n            self._paused = true;\n            self._ended = true;\n            self._sprite = \"__default\";\n            // Generate a new ID so that it isn't confused with the previous sound.\n            self._id = ++Howler._counter;\n            return self;\n        },\n        /**\n     * HTML5 Audio error listener callback.\n     */ _errorListener: function() {\n            var self = this;\n            // Fire an error event and pass back the code.\n            self._parent._emit(\"loaderror\", self._id, self._node.error ? self._node.error.code : 0);\n            // Clear the event listener.\n            self._node.removeEventListener(\"error\", self._errorFn, false);\n        },\n        /**\n     * HTML5 Audio canplaythrough listener callback.\n     */ _loadListener: function() {\n            var self = this;\n            var parent = self._parent;\n            // Round up the duration to account for the lower precision in HTML5 Audio.\n            parent._duration = Math.ceil(self._node.duration * 10) / 10;\n            // Setup a sprite if none is defined.\n            if (Object.keys(parent._sprite).length === 0) parent._sprite = {\n                __default: [\n                    0,\n                    parent._duration * 1000\n                ]\n            };\n            if (parent._state !== \"loaded\") {\n                parent._state = \"loaded\";\n                parent._emit(\"load\");\n                parent._loadQueue();\n            }\n            // Clear the event listener.\n            self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n        },\n        /**\n     * HTML5 Audio ended listener callback.\n     */ _endListener: function() {\n            var self = this;\n            var parent = self._parent;\n            // Only handle the `ended`` event if the duration is Infinity.\n            if (parent._duration === Infinity) {\n                // Update the parent duration to match the real audio duration.\n                // Round up the duration to account for the lower precision in HTML5 Audio.\n                parent._duration = Math.ceil(self._node.duration * 10) / 10;\n                // Update the sprite that corresponds to the real duration.\n                if (parent._sprite.__default[1] === Infinity) parent._sprite.__default[1] = parent._duration * 1000;\n                // Run the regular ended method.\n                parent._ended(self);\n            }\n            // Clear the event listener since the duration is now correct.\n            self._node.removeEventListener(\"ended\", self._endFn, false);\n        }\n    };\n    /** Helper Methods **/ /***************************************************************************/ var cache = {};\n    /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */ var loadBuffer = function(self) {\n        var url = self._src;\n        // Check if the buffer has already been cached and use it instead.\n        if (cache[url]) {\n            // Set the duration from the cache.\n            self._duration = cache[url].duration;\n            // Load the sound into this Howl.\n            loadSound(self);\n            return;\n        }\n        if (/^data:[^;]+;base64,/.test(url)) {\n            // Decode the base64 data URI without XHR, since some browsers don't support it.\n            var data = atob(url.split(\",\")[1]);\n            var dataView = new Uint8Array(data.length);\n            for(var i = 0; i < data.length; ++i)dataView[i] = data.charCodeAt(i);\n            decodeAudioData(dataView.buffer, self);\n        } else {\n            // Load the buffer from the URL.\n            var xhr = new XMLHttpRequest();\n            xhr.open(self._xhr.method, url, true);\n            xhr.withCredentials = self._xhr.withCredentials;\n            xhr.responseType = \"arraybuffer\";\n            // Apply any custom headers to the request.\n            if (self._xhr.headers) Object.keys(self._xhr.headers).forEach(function(key) {\n                xhr.setRequestHeader(key, self._xhr.headers[key]);\n            });\n            xhr.onload = function() {\n                // Make sure we get a successful response back.\n                var code = (xhr.status + \"\")[0];\n                if (code !== \"0\" && code !== \"2\" && code !== \"3\") {\n                    self._emit(\"loaderror\", null, \"Failed loading audio file with status: \" + xhr.status + \".\");\n                    return;\n                }\n                decodeAudioData(xhr.response, self);\n            };\n            xhr.onerror = function() {\n                // If there is an error, switch to HTML5 Audio.\n                if (self._webAudio) {\n                    self._html5 = true;\n                    self._webAudio = false;\n                    self._sounds = [];\n                    delete cache[url];\n                    self.load();\n                }\n            };\n            safeXhrSend(xhr);\n        }\n    };\n    /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */ var safeXhrSend = function(xhr) {\n        try {\n            xhr.send();\n        } catch (e) {\n            xhr.onerror();\n        }\n    };\n    /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */ var decodeAudioData = function(arraybuffer, self) {\n        // Fire a load error if something broke.\n        var error = function() {\n            self._emit(\"loaderror\", null, \"Decoding audio data failed.\");\n        };\n        // Load the sound on success.\n        var success = function(buffer) {\n            if (buffer && self._sounds.length > 0) {\n                cache[self._src] = buffer;\n                loadSound(self, buffer);\n            } else error();\n        };\n        // Decode the buffer into an audio source.\n        if (typeof Promise !== \"undefined\" && Howler.ctx.decodeAudioData.length === 1) Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n        else Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    };\n    /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */ var loadSound = function(self, buffer) {\n        // Set the duration.\n        if (buffer && !self._duration) self._duration = buffer.duration;\n        // Setup a sprite if none is defined.\n        if (Object.keys(self._sprite).length === 0) self._sprite = {\n            __default: [\n                0,\n                self._duration * 1000\n            ]\n        };\n        // Fire the loaded event.\n        if (self._state !== \"loaded\") {\n            self._state = \"loaded\";\n            self._emit(\"load\");\n            self._loadQueue();\n        }\n    };\n    /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */ var setupAudioContext = function() {\n        // If we have already detected that Web Audio isn't supported, don't run this step again.\n        if (!Howler.usingWebAudio) return;\n        // Check if we are using Web Audio and setup the AudioContext if we are.\n        try {\n            if (typeof AudioContext !== \"undefined\") Howler.ctx = new AudioContext();\n            else if (typeof webkitAudioContext !== \"undefined\") Howler.ctx = new webkitAudioContext();\n            else Howler.usingWebAudio = false;\n        } catch (e) {\n            Howler.usingWebAudio = false;\n        }\n        // If the audio context creation still failed, set using web audio to false.\n        if (!Howler.ctx) Howler.usingWebAudio = false;\n        // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n        // If it is, disable Web Audio as it causes crashing.\n        var iOS = /iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform);\n        var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n        var version = appVersion ? parseInt(appVersion[1], 10) : null;\n        if (iOS && version && version < 9) {\n            var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n            if (Howler._navigator && !safari) Howler.usingWebAudio = false;\n        }\n        // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n        if (Howler.usingWebAudio) {\n            Howler.masterGain = typeof Howler.ctx.createGain === \"undefined\" ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n            Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n            Howler.masterGain.connect(Howler.ctx.destination);\n        }\n        // Re-run the setup on Howler.\n        Howler._setup();\n    };\n    // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n    if (typeof define === \"function\" && define.amd) define([], function() {\n        return {\n            Howler: Howler,\n            Howl: Howl\n        };\n    });\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n    // Add to global in Node.js (for testing, etc).\n    if (typeof global !== \"undefined\") {\n        global.HowlerGlobal = HowlerGlobal;\n        global.Howler = Howler;\n        global.Howl = Howl;\n        global.Sound = Sound;\n    } else if (typeof window !== \"undefined\") {\n        window.HowlerGlobal = HowlerGlobal;\n        window.Howler = Howler;\n        window.Howl = Howl;\n        window.Sound = Sound;\n    }\n})();\n\n},{}],\"jMxs5\":[function(require,module,exports) {\nmodule.exports = require(\"ed5d379596441c5d\").getBundleURL(\"apLFO\") + require(\"3283dc43e6d7ea2d\").resolve(\"aYBuu\");\n\n},{\"ed5d379596441c5d\":\"c7Tr5\",\"3283dc43e6d7ea2d\":\"fyJL2\"}],\"c7Tr5\":[function(require,module,exports) {\n\"use strict\";\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n    var value = bundleURL[id];\n    if (!value) {\n        value = getBundleURL();\n        bundleURL[id] = value;\n    }\n    return value;\n}\nfunction getBundleURL() {\n    try {\n        throw new Error();\n    } catch (err) {\n        var matches = (\"\" + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n        if (matches) // The first two stack frames will be this function and getBundleURLCached.\n        // Use the 3rd one, which will be a runtime in the original bundle.\n        return getBaseURL(matches[2]);\n    }\n    return \"/\";\n}\nfunction getBaseURL(url) {\n    return (\"\" + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, \"$1\") + \"/\";\n}\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n    var matches = (\"\" + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n    if (!matches) throw new Error(\"Origin not found\");\n    return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;\n\n},{}],\"k3151\":[function(require,module,exports) {\nexports.interopDefault = function(a) {\n    return a && a.__esModule ? a : {\n        default: a\n    };\n};\nexports.defineInteropFlag = function(a) {\n    Object.defineProperty(a, \"__esModule\", {\n        value: true\n    });\n};\nexports.exportAll = function(source, dest) {\n    Object.keys(source).forEach(function(key) {\n        if (key === \"default\" || key === \"__esModule\" || dest.hasOwnProperty(key)) return;\n        Object.defineProperty(dest, key, {\n            enumerable: true,\n            get: function() {\n                return source[key];\n            }\n        });\n    });\n    return dest;\n};\nexports.export = function(dest, destName, get) {\n    Object.defineProperty(dest, destName, {\n        enumerable: true,\n        get: get\n    });\n};\n\n},{}]},[\"6QSGR\"], \"6QSGR\", \"parcelRequireb3fa\")\n\n//# sourceMappingURL=citadel-accomp.483a913a.js.map\n","import Mousetrap from 'mousetrap'\nimport { Howl, Howler } from 'howler/src/howler.core'\n\n// Hydrate the number of years experience\nconst thisYear = new Date().getFullYear()\nconst careerStart = new Date('2015-01-01').getFullYear()\nconst yearsExperience = `${thisYear > careerStart ? thisYear - careerStart : 6}+`;\ndocument.getElementById('years_exp').innerText = yearsExperience;\n\nlet soundFile = new URL(\"../static/files/easter-egg-coin.wav\", import.meta.url)\nconst sound = new Howl({\n    src: [soundFile],\n    html5: true\n});\nsound.volume(0.4);\n\n// combinations\nMousetrap.bind('command+option+1', function () {\n    toggleGame();\n    return false;\n});\n// combinations\nMousetrap.bind('ctrl+option+1', function () {\n    toggleGame();\n    return false;\n});\n\n\nMousetrap.bind('space', function (e) {\n    if (e.preventDefault) {\n        e.preventDefault();\n    } else {\n        // internet explorer\n        e.returnValue = false;\n    }\n});\n\n\n\nfunction runtime() {\nR=1152,I=1134,O=36,T=0,G=[],a=[],m=[],e=[],s=32,H='innerHTML',N=setTimeout,o=(\ni,b,c)=>i.substring(b,c),onkeydown=e=>V('1----0-2'[e.keyCode-s]),ontouchstart=\nt=>V(W(t.changedTouches.item(0).screenX/screen.width*3)),Y=(m,a)=>{a.map(i=>{h=\no(h,0,i)+m+o(h,i+1,f.length)})},C=0,L=0;M=_=>(W=Math.floor)(Math.random()*_);Q=(\nP,b)=>Array(b+1).join(P),f=Q(' ',R),p=3,N(l='A=A.map(j=>((j+=O)>R)?M(O):j==I&&\\\nL&&p--&&j||j);v()&&N(l,S)',S=64);for(A=[];C<R;)C=A[A.length-1]||0,A.push(C+M(s)+\nS);P=['~(t=','.indexOf(k))?(n[H]=(++T+\"\").fontcolor(\"E35252\"),','.splice(t,1)\\\n):'],i=':S9S08W5W06S5_04T8S3R4T02T;Q<S01SJR02RKR03RKR04R7/5/5/7R05R7/5/5/4S\\\n06R7/5/4S1S07S6/5Z08S1Z3T09U:S0<S6S0?V0AR'.split(0),N(g='j=[];while(k=G.pop\\\n()){k-=O,eval(P.join(\"e\")+P.join(\"m\")+\"(k>0)?j.push(k):0\");if(~(z=a.indexOf(\\\nk)))a.splice(z,1)}G=j;q();v()&&N(g,s)',s),q=_=>{h=f,D=[A,[I],e,m,a,G];for(F in J\n='*A#\\\\ |')Y(J[F],D[F]);for(_=O+1,z=O;z<R/O*_;z+=_)h=o(h,0,z)+'\\n'+o(h,z);b[H]=\n!v()?'win!':h,K[H]=Q('A',p>0?p:(T=0,d(),p=3))},d=_=>{e=[],m=[],a=[],r=3*O;for(c\nof i){w=r;for(u in c){if((U=c[u])=='/')m.push(w),x=1;else{x=U.charCodeAt(0)-48,E\n=x<s?'a':(x-=s)&&'e';for(y=w;y<w+x;y++)+u&&eval(E+'.push(y)')}w+=x}r+=O}},V=e=>\nN(['I=Math.max(R-36,I-1)','G.push(I)', 'I=Math.min(R-1,I+1)'][e],q(),L=1),v=_=>\nT!=150;q(d()) // Brandon Freitag, (c) 2017, freitagbr.github.io/ritopls\n}\n\nfunction toggleGame() {\n    sound.play();\n    const treeElem = document.getElementById(\"tree-output\");\n    const oElem = document.getElementById(\"game\");\n    if (oElem.classList.contains('hidden')) {\n        treeElem.classList.add('hidden')\n        runtime();\n        oElem.classList.remove('hidden')\n        oElem.classList.remove('absolute')\n    } else {\n        treeElem.classList.toggle('hidden')\n        oElem.classList.toggle('hidden')\n        N = () => {}\n    }\n}\n\ndocument.getElementById('egg').addEventListener(\"click\", toggleGame);\n","/*global define:false */\n/**\n * Copyright 2012-2017 Craig Campbell\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Mousetrap is a simple keyboard shortcut library for Javascript with\n * no external dependencies\n *\n * @version 1.6.5\n * @url craig.is/killing/mice\n */\n(function(window, document, undefined) {\n\n    // Check if mousetrap is used inside browser, if not, return\n    if (!window) {\n        return;\n    }\n\n    /**\n     * mapping of special keycodes to their corresponding keys\n     *\n     * everything in this dictionary cannot use keypress events\n     * so it has to be here to map to the correct keycodes for\n     * keyup/keydown events\n     *\n     * @type {Object}\n     */\n    var _MAP = {\n        8: 'backspace',\n        9: 'tab',\n        13: 'enter',\n        16: 'shift',\n        17: 'ctrl',\n        18: 'alt',\n        20: 'capslock',\n        27: 'esc',\n        32: 'space',\n        33: 'pageup',\n        34: 'pagedown',\n        35: 'end',\n        36: 'home',\n        37: 'left',\n        38: 'up',\n        39: 'right',\n        40: 'down',\n        45: 'ins',\n        46: 'del',\n        91: 'meta',\n        93: 'meta',\n        224: 'meta'\n    };\n\n    /**\n     * mapping for special characters so they can support\n     *\n     * this dictionary is only used incase you want to bind a\n     * keyup or keydown event to one of these keys\n     *\n     * @type {Object}\n     */\n    var _KEYCODE_MAP = {\n        106: '*',\n        107: '+',\n        109: '-',\n        110: '.',\n        111 : '/',\n        186: ';',\n        187: '=',\n        188: ',',\n        189: '-',\n        190: '.',\n        191: '/',\n        192: '`',\n        219: '[',\n        220: '\\\\',\n        221: ']',\n        222: '\\''\n    };\n\n    /**\n     * this is a mapping of keys that require shift on a US keypad\n     * back to the non shift equivelents\n     *\n     * this is so you can use keyup events with these keys\n     *\n     * note that this will only work reliably on US keyboards\n     *\n     * @type {Object}\n     */\n    var _SHIFT_MAP = {\n        '~': '`',\n        '!': '1',\n        '@': '2',\n        '#': '3',\n        '$': '4',\n        '%': '5',\n        '^': '6',\n        '&': '7',\n        '*': '8',\n        '(': '9',\n        ')': '0',\n        '_': '-',\n        '+': '=',\n        ':': ';',\n        '\\\"': '\\'',\n        '<': ',',\n        '>': '.',\n        '?': '/',\n        '|': '\\\\'\n    };\n\n    /**\n     * this is a list of special strings you can use to map\n     * to modifier keys when you specify your keyboard shortcuts\n     *\n     * @type {Object}\n     */\n    var _SPECIAL_ALIASES = {\n        'option': 'alt',\n        'command': 'meta',\n        'return': 'enter',\n        'escape': 'esc',\n        'plus': '+',\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\n    };\n\n    /**\n     * variable to store the flipped version of _MAP from above\n     * needed to check if we should use keypress or not when no action\n     * is specified\n     *\n     * @type {Object|undefined}\n     */\n    var _REVERSE_MAP;\n\n    /**\n     * loop through the f keys, f1 to f19 and add them to the map\n     * programatically\n     */\n    for (var i = 1; i < 20; ++i) {\n        _MAP[111 + i] = 'f' + i;\n    }\n\n    /**\n     * loop through to map numbers on the numeric keypad\n     */\n    for (i = 0; i <= 9; ++i) {\n\n        // This needs to use a string cause otherwise since 0 is falsey\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\n        // event.\n        //\n        // @see https://github.com/ccampbell/mousetrap/pull/258\n        _MAP[i + 96] = i.toString();\n    }\n\n    /**\n     * cross browser add event method\n     *\n     * @param {Element|HTMLDocument} object\n     * @param {string} type\n     * @param {Function} callback\n     * @returns void\n     */\n    function _addEvent(object, type, callback) {\n        if (object.addEventListener) {\n            object.addEventListener(type, callback, false);\n            return;\n        }\n\n        object.attachEvent('on' + type, callback);\n    }\n\n    /**\n     * takes the event and returns the key character\n     *\n     * @param {Event} e\n     * @return {string}\n     */\n    function _characterFromEvent(e) {\n\n        // for keypress events we should return the character as is\n        if (e.type == 'keypress') {\n            var character = String.fromCharCode(e.which);\n\n            // if the shift key is not pressed then it is safe to assume\n            // that we want the character to be lowercase.  this means if\n            // you accidentally have caps lock on then your key bindings\n            // will continue to work\n            //\n            // the only side effect that might not be desired is if you\n            // bind something like 'A' cause you want to trigger an\n            // event when capital A is pressed caps lock will no longer\n            // trigger the event.  shift+a will though.\n            if (!e.shiftKey) {\n                character = character.toLowerCase();\n            }\n\n            return character;\n        }\n\n        // for non keypress events the special maps are needed\n        if (_MAP[e.which]) {\n            return _MAP[e.which];\n        }\n\n        if (_KEYCODE_MAP[e.which]) {\n            return _KEYCODE_MAP[e.which];\n        }\n\n        // if it is not in the special map\n\n        // with keydown and keyup events the character seems to always\n        // come in as an uppercase character whether you are pressing shift\n        // or not.  we should make sure it is always lowercase for comparisons\n        return String.fromCharCode(e.which).toLowerCase();\n    }\n\n    /**\n     * checks if two arrays are equal\n     *\n     * @param {Array} modifiers1\n     * @param {Array} modifiers2\n     * @returns {boolean}\n     */\n    function _modifiersMatch(modifiers1, modifiers2) {\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\n    }\n\n    /**\n     * takes a key event and figures out what the modifiers are\n     *\n     * @param {Event} e\n     * @returns {Array}\n     */\n    function _eventModifiers(e) {\n        var modifiers = [];\n\n        if (e.shiftKey) {\n            modifiers.push('shift');\n        }\n\n        if (e.altKey) {\n            modifiers.push('alt');\n        }\n\n        if (e.ctrlKey) {\n            modifiers.push('ctrl');\n        }\n\n        if (e.metaKey) {\n            modifiers.push('meta');\n        }\n\n        return modifiers;\n    }\n\n    /**\n     * prevents default for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _preventDefault(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n            return;\n        }\n\n        e.returnValue = false;\n    }\n\n    /**\n     * stops propogation for this event\n     *\n     * @param {Event} e\n     * @returns void\n     */\n    function _stopPropagation(e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n            return;\n        }\n\n        e.cancelBubble = true;\n    }\n\n    /**\n     * determines if the keycode specified is a modifier key or not\n     *\n     * @param {string} key\n     * @returns {boolean}\n     */\n    function _isModifier(key) {\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\n    }\n\n    /**\n     * reverses the map lookup so that we can look for specific keys\n     * to see what can and can't use keypress\n     *\n     * @return {Object}\n     */\n    function _getReverseMap() {\n        if (!_REVERSE_MAP) {\n            _REVERSE_MAP = {};\n            for (var key in _MAP) {\n\n                // pull out the numeric keypad from here cause keypress should\n                // be able to detect the keys from the character\n                if (key > 95 && key < 112) {\n                    continue;\n                }\n\n                if (_MAP.hasOwnProperty(key)) {\n                    _REVERSE_MAP[_MAP[key]] = key;\n                }\n            }\n        }\n        return _REVERSE_MAP;\n    }\n\n    /**\n     * picks the best action based on the key combination\n     *\n     * @param {string} key - character for key\n     * @param {Array} modifiers\n     * @param {string=} action passed in\n     */\n    function _pickBestAction(key, modifiers, action) {\n\n        // if no action was picked in we should try to pick the one\n        // that we think would work best for this key\n        if (!action) {\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\n        }\n\n        // modifier keys don't work as expected with keypress,\n        // switch to keydown\n        if (action == 'keypress' && modifiers.length) {\n            action = 'keydown';\n        }\n\n        return action;\n    }\n\n    /**\n     * Converts from a string key combination to an array\n     *\n     * @param  {string} combination like \"command+shift+l\"\n     * @return {Array}\n     */\n    function _keysFromString(combination) {\n        if (combination === '+') {\n            return ['+'];\n        }\n\n        combination = combination.replace(/\\+{2}/g, '+plus');\n        return combination.split('+');\n    }\n\n    /**\n     * Gets info for a specific key combination\n     *\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\n     * @param  {string=} action\n     * @returns {Object}\n     */\n    function _getKeyInfo(combination, action) {\n        var keys;\n        var key;\n        var i;\n        var modifiers = [];\n\n        // take the keys from this pattern and figure out what the actual\n        // pattern is all about\n        keys = _keysFromString(combination);\n\n        for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n\n            // normalize key names\n            if (_SPECIAL_ALIASES[key]) {\n                key = _SPECIAL_ALIASES[key];\n            }\n\n            // if this is not a keypress event then we should\n            // be smart about using shift keys\n            // this will only work for US keyboards however\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\n                key = _SHIFT_MAP[key];\n                modifiers.push('shift');\n            }\n\n            // if this key is a modifier then add it to the list of modifiers\n            if (_isModifier(key)) {\n                modifiers.push(key);\n            }\n        }\n\n        // depending on what the key combination is\n        // we will try to pick the best event for it\n        action = _pickBestAction(key, modifiers, action);\n\n        return {\n            key: key,\n            modifiers: modifiers,\n            action: action\n        };\n    }\n\n    function _belongsTo(element, ancestor) {\n        if (element === null || element === document) {\n            return false;\n        }\n\n        if (element === ancestor) {\n            return true;\n        }\n\n        return _belongsTo(element.parentNode, ancestor);\n    }\n\n    function Mousetrap(targetElement) {\n        var self = this;\n\n        targetElement = targetElement || document;\n\n        if (!(self instanceof Mousetrap)) {\n            return new Mousetrap(targetElement);\n        }\n\n        /**\n         * element to attach key events to\n         *\n         * @type {Element}\n         */\n        self.target = targetElement;\n\n        /**\n         * a list of all the callbacks setup via Mousetrap.bind()\n         *\n         * @type {Object}\n         */\n        self._callbacks = {};\n\n        /**\n         * direct map of string combinations to callbacks used for trigger()\n         *\n         * @type {Object}\n         */\n        self._directMap = {};\n\n        /**\n         * keeps track of what level each sequence is at since multiple\n         * sequences can start out with the same sequence\n         *\n         * @type {Object}\n         */\n        var _sequenceLevels = {};\n\n        /**\n         * variable to store the setTimeout call\n         *\n         * @type {null|number}\n         */\n        var _resetTimer;\n\n        /**\n         * temporary state where we will ignore the next keyup\n         *\n         * @type {boolean|string}\n         */\n        var _ignoreNextKeyup = false;\n\n        /**\n         * temporary state where we will ignore the next keypress\n         *\n         * @type {boolean}\n         */\n        var _ignoreNextKeypress = false;\n\n        /**\n         * are we currently inside of a sequence?\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\n         *\n         * @type {boolean|string}\n         */\n        var _nextExpectedAction = false;\n\n        /**\n         * resets all sequence counters except for the ones passed in\n         *\n         * @param {Object} doNotReset\n         * @returns void\n         */\n        function _resetSequences(doNotReset) {\n            doNotReset = doNotReset || {};\n\n            var activeSequences = false,\n                key;\n\n            for (key in _sequenceLevels) {\n                if (doNotReset[key]) {\n                    activeSequences = true;\n                    continue;\n                }\n                _sequenceLevels[key] = 0;\n            }\n\n            if (!activeSequences) {\n                _nextExpectedAction = false;\n            }\n        }\n\n        /**\n         * finds all callbacks that match based on the keycode, modifiers,\n         * and action\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event|Object} e\n         * @param {string=} sequenceName - name of the sequence we are looking for\n         * @param {string=} combination\n         * @param {number=} level\n         * @returns {Array}\n         */\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\n            var i;\n            var callback;\n            var matches = [];\n            var action = e.type;\n\n            // if there are no events related to this keycode\n            if (!self._callbacks[character]) {\n                return [];\n            }\n\n            // if a modifier key is coming up on its own we should allow it\n            if (action == 'keyup' && _isModifier(character)) {\n                modifiers = [character];\n            }\n\n            // loop through all callbacks for the key that was pressed\n            // and see if any of them match\n            for (i = 0; i < self._callbacks[character].length; ++i) {\n                callback = self._callbacks[character][i];\n\n                // if a sequence name is not specified, but this is a sequence at\n                // the wrong level then move onto the next match\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\n                    continue;\n                }\n\n                // if the action we are looking for doesn't match the action we got\n                // then we should keep going\n                if (action != callback.action) {\n                    continue;\n                }\n\n                // if this is a keypress event and the meta key and control key\n                // are not pressed that means that we need to only look at the\n                // character, otherwise check the modifiers as well\n                //\n                // chrome will not fire a keypress if meta or control is down\n                // safari will fire a keypress if meta or meta+shift is down\n                // firefox will fire a keypress if meta or control is down\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\n\n                    // when you bind a combination or sequence a second time it\n                    // should overwrite the first one.  if a sequenceName or\n                    // combination is specified in this call it does just that\n                    //\n                    // @todo make deleting its own method?\n                    var deleteCombo = !sequenceName && callback.combo == combination;\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\n                    if (deleteCombo || deleteSequence) {\n                        self._callbacks[character].splice(i, 1);\n                    }\n\n                    matches.push(callback);\n                }\n            }\n\n            return matches;\n        }\n\n        /**\n         * actually calls the callback function\n         *\n         * if your callback function returns false this will use the jquery\n         * convention - prevent default and stop propogation on the event\n         *\n         * @param {Function} callback\n         * @param {Event} e\n         * @returns void\n         */\n        function _fireCallback(callback, e, combo, sequence) {\n\n            // if this event should not happen stop here\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\n                return;\n            }\n\n            if (callback(e, combo) === false) {\n                _preventDefault(e);\n                _stopPropagation(e);\n            }\n        }\n\n        /**\n         * handles a character key event\n         *\n         * @param {string} character\n         * @param {Array} modifiers\n         * @param {Event} e\n         * @returns void\n         */\n        self._handleKey = function(character, modifiers, e) {\n            var callbacks = _getMatches(character, modifiers, e);\n            var i;\n            var doNotReset = {};\n            var maxLevel = 0;\n            var processedSequenceCallback = false;\n\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\n            for (i = 0; i < callbacks.length; ++i) {\n                if (callbacks[i].seq) {\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\n                }\n            }\n\n            // loop through matching callbacks for this key event\n            for (i = 0; i < callbacks.length; ++i) {\n\n                // fire for all sequence callbacks\n                // this is because if for example you have multiple sequences\n                // bound such as \"g i\" and \"g t\" they both need to fire the\n                // callback for matching g cause otherwise you can only ever\n                // match the first one\n                if (callbacks[i].seq) {\n\n                    // only fire callbacks for the maxLevel to prevent\n                    // subsequences from also firing\n                    //\n                    // for example 'a option b' should not cause 'option b' to fire\n                    // even though 'option b' is part of the other sequence\n                    //\n                    // any sequences that do not match here will be discarded\n                    // below by the _resetSequences call\n                    if (callbacks[i].level != maxLevel) {\n                        continue;\n                    }\n\n                    processedSequenceCallback = true;\n\n                    // keep a list of which sequences were matches for later\n                    doNotReset[callbacks[i].seq] = 1;\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\n                    continue;\n                }\n\n                // if there were no sequence matches but we are still here\n                // that means this is a regular match so we should fire that\n                if (!processedSequenceCallback) {\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\n                }\n            }\n\n            // if the key you pressed matches the type of sequence without\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\n            // reset all sequences that were not matched by this event\n            //\n            // this is so, for example, if you have the sequence \"h a t\" and you\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\n            // cause the sequence to reset\n            //\n            // modifier keys are ignored because you can have a sequence\n            // that contains modifiers such as \"enter ctrl+space\" and in most\n            // cases the modifier key will be pressed before the next key\n            //\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\n            //\n            // the \"keydown\" is expected when there is a modifier, but the\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\n            // after and that causes the sequence to reset\n            //\n            // we ignore keypresses in a sequence that directly follow a keydown\n            // for the same character\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\n                _resetSequences(doNotReset);\n            }\n\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\n        };\n\n        /**\n         * handles a keydown event\n         *\n         * @param {Event} e\n         * @returns void\n         */\n        function _handleKeyEvent(e) {\n\n            // normalize e.which for key events\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\n            if (typeof e.which !== 'number') {\n                e.which = e.keyCode;\n            }\n\n            var character = _characterFromEvent(e);\n\n            // no character found then stop\n            if (!character) {\n                return;\n            }\n\n            // need to use === for the character check because the character can be 0\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\n                _ignoreNextKeyup = false;\n                return;\n            }\n\n            self.handleKey(character, _eventModifiers(e), e);\n        }\n\n        /**\n         * called to set a 1 second timeout on the specified sequence\n         *\n         * this is so after each key press in the sequence you have 1 second\n         * to press the next key before you have to start over\n         *\n         * @returns void\n         */\n        function _resetSequenceTimer() {\n            clearTimeout(_resetTimer);\n            _resetTimer = setTimeout(_resetSequences, 1000);\n        }\n\n        /**\n         * binds a key sequence to an event\n         *\n         * @param {string} combo - combo specified in bind call\n         * @param {Array} keys\n         * @param {Function} callback\n         * @param {string=} action\n         * @returns void\n         */\n        function _bindSequence(combo, keys, callback, action) {\n\n            // start off by adding a sequence level record for this combination\n            // and setting the level to 0\n            _sequenceLevels[combo] = 0;\n\n            /**\n             * callback to increase the sequence level for this sequence and reset\n             * all other sequences that were active\n             *\n             * @param {string} nextAction\n             * @returns {Function}\n             */\n            function _increaseSequence(nextAction) {\n                return function() {\n                    _nextExpectedAction = nextAction;\n                    ++_sequenceLevels[combo];\n                    _resetSequenceTimer();\n                };\n            }\n\n            /**\n             * wraps the specified callback inside of another function in order\n             * to reset all sequence counters as soon as this sequence is done\n             *\n             * @param {Event} e\n             * @returns void\n             */\n            function _callbackAndReset(e) {\n                _fireCallback(callback, e, combo);\n\n                // we should ignore the next key up if the action is key down\n                // or keypress.  this is so if you finish a sequence and\n                // release the key the final key will not trigger a keyup\n                if (action !== 'keyup') {\n                    _ignoreNextKeyup = _characterFromEvent(e);\n                }\n\n                // weird race condition if a sequence ends with the key\n                // another sequence begins with\n                setTimeout(_resetSequences, 10);\n            }\n\n            // loop through keys one at a time and bind the appropriate callback\n            // function.  for any key leading up to the final one it should\n            // increase the sequence. after the final, it should reset all sequences\n            //\n            // if an action is specified in the original bind call then that will\n            // be used throughout.  otherwise we will pass the action that the\n            // next key in the sequence should match.  this allows a sequence\n            // to mix and match keypress and keydown events depending on which\n            // ones are better suited to the key provided\n            for (var i = 0; i < keys.length; ++i) {\n                var isFinal = i + 1 === keys.length;\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\n            }\n        }\n\n        /**\n         * binds a single keyboard combination\n         *\n         * @param {string} combination\n         * @param {Function} callback\n         * @param {string=} action\n         * @param {string=} sequenceName - name of sequence if part of sequence\n         * @param {number=} level - what part of the sequence the command is\n         * @returns void\n         */\n        function _bindSingle(combination, callback, action, sequenceName, level) {\n\n            // store a direct mapped reference for use with Mousetrap.trigger\n            self._directMap[combination + ':' + action] = callback;\n\n            // make sure multiple spaces in a row become a single space\n            combination = combination.replace(/\\s+/g, ' ');\n\n            var sequence = combination.split(' ');\n            var info;\n\n            // if this pattern is a sequence of keys then run through this method\n            // to reprocess each pattern one key at a time\n            if (sequence.length > 1) {\n                _bindSequence(combination, sequence, callback, action);\n                return;\n            }\n\n            info = _getKeyInfo(combination, action);\n\n            // make sure to initialize array if this is the first time\n            // a callback is added for this key\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\n\n            // remove an existing match if there is one\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\n\n            // add this call back to the array\n            // if it is a sequence put it at the beginning\n            // if not put it at the end\n            //\n            // this is important because the way these are processed expects\n            // the sequence ones to come first\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\n                callback: callback,\n                modifiers: info.modifiers,\n                action: info.action,\n                seq: sequenceName,\n                level: level,\n                combo: combination\n            });\n        }\n\n        /**\n         * binds multiple combinations to the same callback\n         *\n         * @param {Array} combinations\n         * @param {Function} callback\n         * @param {string|undefined} action\n         * @returns void\n         */\n        self._bindMultiple = function(combinations, callback, action) {\n            for (var i = 0; i < combinations.length; ++i) {\n                _bindSingle(combinations[i], callback, action);\n            }\n        };\n\n        // start!\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\n    }\n\n    /**\n     * binds an event to mousetrap\n     *\n     * can be a single key, a combination of keys separated with +,\n     * an array of keys, or a sequence of keys separated by spaces\n     *\n     * be sure to list the modifier keys first to make sure that the\n     * correct key ends up getting bound (the last key in the pattern)\n     *\n     * @param {string|Array} keys\n     * @param {Function} callback\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\n     * @returns void\n     */\n    Mousetrap.prototype.bind = function(keys, callback, action) {\n        var self = this;\n        keys = keys instanceof Array ? keys : [keys];\n        self._bindMultiple.call(self, keys, callback, action);\n        return self;\n    };\n\n    /**\n     * unbinds an event to mousetrap\n     *\n     * the unbinding sets the callback function of the specified key combo\n     * to an empty function and deletes the corresponding key in the\n     * _directMap dict.\n     *\n     * TODO: actually remove this from the _callbacks dictionary instead\n     * of binding an empty function\n     *\n     * the keycombo+action has to be exactly the same as\n     * it was defined in the bind method\n     *\n     * @param {string|Array} keys\n     * @param {string} action\n     * @returns void\n     */\n    Mousetrap.prototype.unbind = function(keys, action) {\n        var self = this;\n        return self.bind.call(self, keys, function() {}, action);\n    };\n\n    /**\n     * triggers an event that has already been bound\n     *\n     * @param {string} keys\n     * @param {string=} action\n     * @returns void\n     */\n    Mousetrap.prototype.trigger = function(keys, action) {\n        var self = this;\n        if (self._directMap[keys + ':' + action]) {\n            self._directMap[keys + ':' + action]({}, keys);\n        }\n        return self;\n    };\n\n    /**\n     * resets the library back to its initial state.  this is useful\n     * if you want to clear out the current keyboard shortcuts and bind\n     * new ones - for example if you switch to another page\n     *\n     * @returns void\n     */\n    Mousetrap.prototype.reset = function() {\n        var self = this;\n        self._callbacks = {};\n        self._directMap = {};\n        return self;\n    };\n\n    /**\n     * should we stop this event before firing off callbacks\n     *\n     * @param {Event} e\n     * @param {Element} element\n     * @return {boolean}\n     */\n    Mousetrap.prototype.stopCallback = function(e, element) {\n        var self = this;\n\n        // if the element has the class \"mousetrap\" then no need to stop\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\n            return false;\n        }\n\n        if (_belongsTo(element, self.target)) {\n            return false;\n        }\n\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\n        // not the initial event target in the shadow tree. Note that not all events cross the\n        // shadow boundary.\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\n        // target cannot be obtained.\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\n            // For open shadow trees, update `element` so that the following check works.\n            var initialEventTarget = e.composedPath()[0];\n            if (initialEventTarget !== e.target) {\n                element = initialEventTarget;\n            }\n        }\n\n        // stop for input, select, and textarea\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\n    };\n\n    /**\n     * exposes _handleKey publicly so it can be overwritten by extensions\n     */\n    Mousetrap.prototype.handleKey = function() {\n        var self = this;\n        return self._handleKey.apply(self, arguments);\n    };\n\n    /**\n     * allow custom key mappings\n     */\n    Mousetrap.addKeycodes = function(object) {\n        for (var key in object) {\n            if (object.hasOwnProperty(key)) {\n                _MAP[key] = object[key];\n            }\n        }\n        _REVERSE_MAP = null;\n    };\n\n    /**\n     * Init the global mousetrap functions\n     *\n     * This method is needed to allow the global mousetrap functions to work\n     * now that mousetrap is a constructor function.\n     */\n    Mousetrap.init = function() {\n        var documentMousetrap = Mousetrap(document);\n        for (var method in documentMousetrap) {\n            if (method.charAt(0) !== '_') {\n                Mousetrap[method] = (function(method) {\n                    return function() {\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\n                    };\n                } (method));\n            }\n        }\n    };\n\n    Mousetrap.init();\n\n    // expose mousetrap to the global object\n    window.Mousetrap = Mousetrap;\n\n    // expose as a common js module\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = Mousetrap;\n    }\n\n    // expose mousetrap as an AMD module\n    if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return Mousetrap;\n        });\n    }\n}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);\n","/*!\n *  howler.js v2.2.3\n *  howlerjs.com\n *\n *  (c) 2013-2020, James Simpson of GoldFire Studios\n *  goldfirestudios.com\n *\n *  MIT License\n */\n\n(function() {\n\n  'use strict';\n\n  /** Global Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create the global controller. All contained methods and properties apply\n   * to all sounds that are currently playing or will be in the future.\n   */\n  var HowlerGlobal = function() {\n    this.init();\n  };\n  HowlerGlobal.prototype = {\n    /**\n     * Initialize the global Howler object.\n     * @return {Howler}\n     */\n    init: function() {\n      var self = this || Howler;\n\n      // Create a global ID counter.\n      self._counter = 1000;\n\n      // Pool of unlocked HTML5 Audio objects.\n      self._html5AudioPool = [];\n      self.html5PoolSize = 10;\n\n      // Internal properties.\n      self._codecs = {};\n      self._howls = [];\n      self._muted = false;\n      self._volume = 1;\n      self._canPlayEvent = 'canplaythrough';\n      self._navigator = (typeof window !== 'undefined' && window.navigator) ? window.navigator : null;\n\n      // Public properties.\n      self.masterGain = null;\n      self.noAudio = false;\n      self.usingWebAudio = true;\n      self.autoSuspend = true;\n      self.ctx = null;\n\n      // Set to false to disable the auto audio unlocker.\n      self.autoUnlock = true;\n\n      // Setup the various state values for global tracking.\n      self._setup();\n\n      return self;\n    },\n\n    /**\n     * Get/set the global volume for all sounds.\n     * @param  {Float} vol Volume from 0.0 to 1.0.\n     * @return {Howler/Float}     Returns self or current volume.\n     */\n    volume: function(vol) {\n      var self = this || Howler;\n      vol = parseFloat(vol);\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        self._volume = vol;\n\n        // Don't update any of the nodes if we are muted.\n        if (self._muted) {\n          return self;\n        }\n\n        // When using Web Audio, we just need to adjust the master gain.\n        if (self.usingWebAudio) {\n          self.masterGain.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n        }\n\n        // Loop through and change volume for all HTML5 audio nodes.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and change the volumes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node) {\n                sound._node.volume = sound._volume * vol;\n              }\n            }\n          }\n        }\n\n        return self;\n      }\n\n      return self._volume;\n    },\n\n    /**\n     * Handle muting and unmuting globally.\n     * @param  {Boolean} muted Is muted or not.\n     */\n    mute: function(muted) {\n      var self = this || Howler;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!self.ctx) {\n        setupAudioContext();\n      }\n\n      self._muted = muted;\n\n      // With Web Audio, we just need to mute the master gain.\n      if (self.usingWebAudio) {\n        self.masterGain.gain.setValueAtTime(muted ? 0 : self._volume, Howler.ctx.currentTime);\n      }\n\n      // Loop through and mute all HTML5 Audio nodes.\n      for (var i=0; i<self._howls.length; i++) {\n        if (!self._howls[i]._webAudio) {\n          // Get all of the sounds in this Howl group.\n          var ids = self._howls[i]._getSoundIds();\n\n          // Loop through all sounds and mark the audio node as muted.\n          for (var j=0; j<ids.length; j++) {\n            var sound = self._howls[i]._soundById(ids[j]);\n\n            if (sound && sound._node) {\n              sound._node.muted = (muted) ? true : sound._muted;\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Handle stopping all sounds globally.\n     */\n    stop: function() {\n      var self = this || Howler;\n\n      // Loop through all Howls and stop them.\n      for (var i=0; i<self._howls.length; i++) {\n        self._howls[i].stop();\n      }\n\n      return self;\n    },\n\n    /**\n     * Unload and destroy all currently loaded Howl objects.\n     * @return {Howler}\n     */\n    unload: function() {\n      var self = this || Howler;\n\n      for (var i=self._howls.length-1; i>=0; i--) {\n        self._howls[i].unload();\n      }\n\n      // Create a new AudioContext to make sure it is fully reset.\n      if (self.usingWebAudio && self.ctx && typeof self.ctx.close !== 'undefined') {\n        self.ctx.close();\n        self.ctx = null;\n        setupAudioContext();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for codec support of specific extension.\n     * @param  {String} ext Audio file extention.\n     * @return {Boolean}\n     */\n    codecs: function(ext) {\n      return (this || Howler)._codecs[ext.replace(/^x-/, '')];\n    },\n\n    /**\n     * Setup various state values for global tracking.\n     * @return {Howler}\n     */\n    _setup: function() {\n      var self = this || Howler;\n\n      // Keeps track of the suspend/resume state of the AudioContext.\n      self.state = self.ctx ? self.ctx.state || 'suspended' : 'suspended';\n\n      // Automatically begin the 30-second suspend process\n      self._autoSuspend();\n\n      // Check if audio is available.\n      if (!self.usingWebAudio) {\n        // No audio is available on this system if noAudio is set to true.\n        if (typeof Audio !== 'undefined') {\n          try {\n            var test = new Audio();\n\n            // Check if the canplaythrough event is available.\n            if (typeof test.oncanplaythrough === 'undefined') {\n              self._canPlayEvent = 'canplay';\n            }\n          } catch(e) {\n            self.noAudio = true;\n          }\n        } else {\n          self.noAudio = true;\n        }\n      }\n\n      // Test to make sure audio isn't disabled in Internet Explorer.\n      try {\n        var test = new Audio();\n        if (test.muted) {\n          self.noAudio = true;\n        }\n      } catch (e) {}\n\n      // Check for supported codecs.\n      if (!self.noAudio) {\n        self._setupCodecs();\n      }\n\n      return self;\n    },\n\n    /**\n     * Check for browser support for various codecs and cache the results.\n     * @return {Howler}\n     */\n    _setupCodecs: function() {\n      var self = this || Howler;\n      var audioTest = null;\n\n      // Must wrap in a try/catch because IE11 in server mode throws an error.\n      try {\n        audioTest = (typeof Audio !== 'undefined') ? new Audio() : null;\n      } catch (err) {\n        return self;\n      }\n\n      if (!audioTest || typeof audioTest.canPlayType !== 'function') {\n        return self;\n      }\n\n      var mpegTest = audioTest.canPlayType('audio/mpeg;').replace(/^no$/, '');\n\n      // Opera version <33 has mixed MP3 support, so we need to check for and block it.\n      var ua = self._navigator ? self._navigator.userAgent : '';\n      var checkOpera = ua.match(/OPR\\/([0-6].)/g);\n      var isOldOpera = (checkOpera && parseInt(checkOpera[0].split('/')[1], 10) < 33);\n      var checkSafari = ua.indexOf('Safari') !== -1 && ua.indexOf('Chrome') === -1;\n      var safariVersion = ua.match(/Version\\/(.*?) /);\n      var isOldSafari = (checkSafari && safariVersion && parseInt(safariVersion[1], 10) < 15);\n\n      self._codecs = {\n        mp3: !!(!isOldOpera && (mpegTest || audioTest.canPlayType('audio/mp3;').replace(/^no$/, ''))),\n        mpeg: !!mpegTest,\n        opus: !!audioTest.canPlayType('audio/ogg; codecs=\"opus\"').replace(/^no$/, ''),\n        ogg: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        oga: !!audioTest.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/, ''),\n        wav: !!(audioTest.canPlayType('audio/wav; codecs=\"1\"') || audioTest.canPlayType('audio/wav')).replace(/^no$/, ''),\n        aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),\n        caf: !!audioTest.canPlayType('audio/x-caf;').replace(/^no$/, ''),\n        m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        m4b: !!(audioTest.canPlayType('audio/x-m4b;') || audioTest.canPlayType('audio/m4b;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),\n        weba: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        webm: !!(!isOldSafari && audioTest.canPlayType('audio/webm; codecs=\"vorbis\"').replace(/^no$/, '')),\n        dolby: !!audioTest.canPlayType('audio/mp4; codecs=\"ec-3\"').replace(/^no$/, ''),\n        flac: !!(audioTest.canPlayType('audio/x-flac;') || audioTest.canPlayType('audio/flac;')).replace(/^no$/, '')\n      };\n\n      return self;\n    },\n\n    /**\n     * Some browsers/devices will only allow audio to be played after a user interaction.\n     * Attempt to automatically unlock audio on the first user interaction.\n     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/\n     * @return {Howler}\n     */\n    _unlockAudio: function() {\n      var self = this || Howler;\n\n      // Only run this if Web Audio is supported and it hasn't already been unlocked.\n      if (self._audioUnlocked || !self.ctx) {\n        return;\n      }\n\n      self._audioUnlocked = false;\n      self.autoUnlock = false;\n\n      // Some mobile devices/platforms have distortion issues when opening/closing tabs and/or web views.\n      // Bugs in the browser (especially Mobile Safari) can cause the sampleRate to change from 44100 to 48000.\n      // By calling Howler.unload(), we create a new AudioContext with the correct sampleRate.\n      if (!self._mobileUnloaded && self.ctx.sampleRate !== 44100) {\n        self._mobileUnloaded = true;\n        self.unload();\n      }\n\n      // Scratch buffer for enabling iOS to dispose of web audio buffers correctly, as per:\n      // http://stackoverflow.com/questions/24119684\n      self._scratchBuffer = self.ctx.createBuffer(1, 1, 22050);\n\n      // Call this method on touch start to create and play a buffer,\n      // then check if the audio actually played to determine if\n      // audio has now been unlocked on iOS, Android, etc.\n      var unlock = function(e) {\n        // Create a pool of unlocked HTML5 Audio objects that can\n        // be used for playing sounds without user interaction. HTML5\n        // Audio objects must be individually unlocked, as opposed\n        // to the WebAudio API which only needs a single activation.\n        // This must occur before WebAudio setup or the source.onended\n        // event will not fire.\n        while (self._html5AudioPool.length < self.html5PoolSize) {\n          try {\n            var audioNode = new Audio();\n\n            // Mark this Audio object as unlocked to ensure it can get returned\n            // to the unlocked pool when released.\n            audioNode._unlocked = true;\n\n            // Add the audio node to the pool.\n            self._releaseHtml5Audio(audioNode);\n          } catch (e) {\n            self.noAudio = true;\n            break;\n          }\n        }\n\n        // Loop through any assigned audio nodes and unlock them.\n        for (var i=0; i<self._howls.length; i++) {\n          if (!self._howls[i]._webAudio) {\n            // Get all of the sounds in this Howl group.\n            var ids = self._howls[i]._getSoundIds();\n\n            // Loop through all sounds and unlock the audio nodes.\n            for (var j=0; j<ids.length; j++) {\n              var sound = self._howls[i]._soundById(ids[j]);\n\n              if (sound && sound._node && !sound._node._unlocked) {\n                sound._node._unlocked = true;\n                sound._node.load();\n              }\n            }\n          }\n        }\n\n        // Fix Android can not play in suspend state.\n        self._autoResume();\n\n        // Create an empty buffer.\n        var source = self.ctx.createBufferSource();\n        source.buffer = self._scratchBuffer;\n        source.connect(self.ctx.destination);\n\n        // Play the empty buffer.\n        if (typeof source.start === 'undefined') {\n          source.noteOn(0);\n        } else {\n          source.start(0);\n        }\n\n        // Calling resume() on a stack initiated by user gesture is what actually unlocks the audio on Android Chrome >= 55.\n        if (typeof self.ctx.resume === 'function') {\n          self.ctx.resume();\n        }\n\n        // Setup a timeout to check that we are unlocked on the next event loop.\n        source.onended = function() {\n          source.disconnect(0);\n\n          // Update the unlocked state and prevent this check from happening again.\n          self._audioUnlocked = true;\n\n          // Remove the touch start listener.\n          document.removeEventListener('touchstart', unlock, true);\n          document.removeEventListener('touchend', unlock, true);\n          document.removeEventListener('click', unlock, true);\n          document.removeEventListener('keydown', unlock, true);\n\n          // Let all sounds know that audio has been unlocked.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('unlock');\n          }\n        };\n      };\n\n      // Setup a touch start listener to attempt an unlock in.\n      document.addEventListener('touchstart', unlock, true);\n      document.addEventListener('touchend', unlock, true);\n      document.addEventListener('click', unlock, true);\n      document.addEventListener('keydown', unlock, true);\n\n      return self;\n    },\n\n    /**\n     * Get an unlocked HTML5 Audio object from the pool. If none are left,\n     * return a new Audio object and throw a warning.\n     * @return {Audio} HTML5 Audio object.\n     */\n    _obtainHtml5Audio: function() {\n      var self = this || Howler;\n\n      // Return the next object from the pool if one exists.\n      if (self._html5AudioPool.length) {\n        return self._html5AudioPool.pop();\n      }\n\n      //.Check if the audio is locked and throw a warning.\n      var testPlay = new Audio().play();\n      if (testPlay && typeof Promise !== 'undefined' && (testPlay instanceof Promise || typeof testPlay.then === 'function')) {\n        testPlay.catch(function() {\n          console.warn('HTML5 Audio pool exhausted, returning potentially locked audio object.');\n        });\n      }\n\n      return new Audio();\n    },\n\n    /**\n     * Return an activated HTML5 Audio object to the pool.\n     * @return {Howler}\n     */\n    _releaseHtml5Audio: function(audio) {\n      var self = this || Howler;\n\n      // Don't add audio to the pool if we don't know if it has been unlocked.\n      if (audio._unlocked) {\n        self._html5AudioPool.push(audio);\n      }\n\n      return self;\n    },\n\n    /**\n     * Automatically suspend the Web Audio AudioContext after no sound has played for 30 seconds.\n     * This saves processing/energy and fixes various browser-specific bugs with audio getting stuck.\n     * @return {Howler}\n     */\n    _autoSuspend: function() {\n      var self = this;\n\n      if (!self.autoSuspend || !self.ctx || typeof self.ctx.suspend === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      // Check if any sounds are playing.\n      for (var i=0; i<self._howls.length; i++) {\n        if (self._howls[i]._webAudio) {\n          for (var j=0; j<self._howls[i]._sounds.length; j++) {\n            if (!self._howls[i]._sounds[j]._paused) {\n              return self;\n            }\n          }\n        }\n      }\n\n      if (self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n      }\n\n      // If no sound has played after 30 seconds, suspend the context.\n      self._suspendTimer = setTimeout(function() {\n        if (!self.autoSuspend) {\n          return;\n        }\n\n        self._suspendTimer = null;\n        self.state = 'suspending';\n\n        // Handle updating the state of the audio context after suspending.\n        var handleSuspension = function() {\n          self.state = 'suspended';\n\n          if (self._resumeAfterSuspend) {\n            delete self._resumeAfterSuspend;\n            self._autoResume();\n          }\n        };\n\n        // Either the state gets suspended or it is interrupted.\n        // Either way, we need to update the state to suspended.\n        self.ctx.suspend().then(handleSuspension, handleSuspension);\n      }, 30000);\n\n      return self;\n    },\n\n    /**\n     * Automatically resume the Web Audio AudioContext when a new sound is played.\n     * @return {Howler}\n     */\n    _autoResume: function() {\n      var self = this;\n\n      if (!self.ctx || typeof self.ctx.resume === 'undefined' || !Howler.usingWebAudio) {\n        return;\n      }\n\n      if (self.state === 'running' && self.ctx.state !== 'interrupted' && self._suspendTimer) {\n        clearTimeout(self._suspendTimer);\n        self._suspendTimer = null;\n      } else if (self.state === 'suspended' || self.state === 'running' && self.ctx.state === 'interrupted') {\n        self.ctx.resume().then(function() {\n          self.state = 'running';\n\n          // Emit to all Howls that the audio has resumed.\n          for (var i=0; i<self._howls.length; i++) {\n            self._howls[i]._emit('resume');\n          }\n        });\n\n        if (self._suspendTimer) {\n          clearTimeout(self._suspendTimer);\n          self._suspendTimer = null;\n        }\n      } else if (self.state === 'suspending') {\n        self._resumeAfterSuspend = true;\n      }\n\n      return self;\n    }\n  };\n\n  // Setup the global audio controller.\n  var Howler = new HowlerGlobal();\n\n  /** Group Methods **/\n  /***************************************************************************/\n\n  /**\n   * Create an audio group controller.\n   * @param {Object} o Passed in properties for this group.\n   */\n  var Howl = function(o) {\n    var self = this;\n\n    // Throw an error if no source is provided.\n    if (!o.src || o.src.length === 0) {\n      console.error('An array of source files must be passed with any new Howl.');\n      return;\n    }\n\n    self.init(o);\n  };\n  Howl.prototype = {\n    /**\n     * Initialize a new Howl group object.\n     * @param  {Object} o Passed in properties for this group.\n     * @return {Howl}\n     */\n    init: function(o) {\n      var self = this;\n\n      // If we don't have an AudioContext created yet, run the setup.\n      if (!Howler.ctx) {\n        setupAudioContext();\n      }\n\n      // Setup user-defined default properties.\n      self._autoplay = o.autoplay || false;\n      self._format = (typeof o.format !== 'string') ? o.format : [o.format];\n      self._html5 = o.html5 || false;\n      self._muted = o.mute || false;\n      self._loop = o.loop || false;\n      self._pool = o.pool || 5;\n      self._preload = (typeof o.preload === 'boolean' || o.preload === 'metadata') ? o.preload : true;\n      self._rate = o.rate || 1;\n      self._sprite = o.sprite || {};\n      self._src = (typeof o.src !== 'string') ? o.src : [o.src];\n      self._volume = o.volume !== undefined ? o.volume : 1;\n      self._xhr = {\n        method: o.xhr && o.xhr.method ? o.xhr.method : 'GET',\n        headers: o.xhr && o.xhr.headers ? o.xhr.headers : null,\n        withCredentials: o.xhr && o.xhr.withCredentials ? o.xhr.withCredentials : false,\n      };\n\n      // Setup all other default properties.\n      self._duration = 0;\n      self._state = 'unloaded';\n      self._sounds = [];\n      self._endTimers = {};\n      self._queue = [];\n      self._playLock = false;\n\n      // Setup event listeners.\n      self._onend = o.onend ? [{fn: o.onend}] : [];\n      self._onfade = o.onfade ? [{fn: o.onfade}] : [];\n      self._onload = o.onload ? [{fn: o.onload}] : [];\n      self._onloaderror = o.onloaderror ? [{fn: o.onloaderror}] : [];\n      self._onplayerror = o.onplayerror ? [{fn: o.onplayerror}] : [];\n      self._onpause = o.onpause ? [{fn: o.onpause}] : [];\n      self._onplay = o.onplay ? [{fn: o.onplay}] : [];\n      self._onstop = o.onstop ? [{fn: o.onstop}] : [];\n      self._onmute = o.onmute ? [{fn: o.onmute}] : [];\n      self._onvolume = o.onvolume ? [{fn: o.onvolume}] : [];\n      self._onrate = o.onrate ? [{fn: o.onrate}] : [];\n      self._onseek = o.onseek ? [{fn: o.onseek}] : [];\n      self._onunlock = o.onunlock ? [{fn: o.onunlock}] : [];\n      self._onresume = [];\n\n      // Web Audio or HTML5 Audio?\n      self._webAudio = Howler.usingWebAudio && !self._html5;\n\n      // Automatically try to enable audio.\n      if (typeof Howler.ctx !== 'undefined' && Howler.ctx && Howler.autoUnlock) {\n        Howler._unlockAudio();\n      }\n\n      // Keep track of this Howl group in the global controller.\n      Howler._howls.push(self);\n\n      // If they selected autoplay, add a play event to the load queue.\n      if (self._autoplay) {\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play();\n          }\n        });\n      }\n\n      // Load the source file unless otherwise specified.\n      if (self._preload && self._preload !== 'none') {\n        self.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Load the audio file.\n     * @return {Howler}\n     */\n    load: function() {\n      var self = this;\n      var url = null;\n\n      // If no audio is available, quit immediately.\n      if (Howler.noAudio) {\n        self._emit('loaderror', null, 'No audio support.');\n        return;\n      }\n\n      // Make sure our source is in an array.\n      if (typeof self._src === 'string') {\n        self._src = [self._src];\n      }\n\n      // Loop through the sources and pick the first one that is compatible.\n      for (var i=0; i<self._src.length; i++) {\n        var ext, str;\n\n        if (self._format && self._format[i]) {\n          // If an extension was specified, use that instead.\n          ext = self._format[i];\n        } else {\n          // Make sure the source is a string.\n          str = self._src[i];\n          if (typeof str !== 'string') {\n            self._emit('loaderror', null, 'Non-string found in selected audio sources - ignoring.');\n            continue;\n          }\n\n          // Extract the file extension from the URL or base64 data URI.\n          ext = /^data:audio\\/([^;,]+);/i.exec(str);\n          if (!ext) {\n            ext = /\\.([^.]+)$/.exec(str.split('?', 1)[0]);\n          }\n\n          if (ext) {\n            ext = ext[1].toLowerCase();\n          }\n        }\n\n        // Log a warning if no extension was found.\n        if (!ext) {\n          console.warn('No file extension was found. Consider using the \"format\" property or specify an extension.');\n        }\n\n        // Check if this extension is available.\n        if (ext && Howler.codecs(ext)) {\n          url = self._src[i];\n          break;\n        }\n      }\n\n      if (!url) {\n        self._emit('loaderror', null, 'No codec support for selected audio sources.');\n        return;\n      }\n\n      self._src = url;\n      self._state = 'loading';\n\n      // If the hosting page is HTTPS and the source isn't,\n      // drop down to HTML5 Audio to avoid Mixed Content errors.\n      if (window.location.protocol === 'https:' && url.slice(0, 5) === 'http:') {\n        self._html5 = true;\n        self._webAudio = false;\n      }\n\n      // Create a new sound object and add it to the pool.\n      new Sound(self);\n\n      // Load and decode the audio data for playback.\n      if (self._webAudio) {\n        loadBuffer(self);\n      }\n\n      return self;\n    },\n\n    /**\n     * Play a sound or resume previous playback.\n     * @param  {String/Number} sprite   Sprite name for sprite playback or sound id to continue previous.\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Number}          Sound ID.\n     */\n    play: function(sprite, internal) {\n      var self = this;\n      var id = null;\n\n      // Determine if a sprite, sound id or nothing was passed\n      if (typeof sprite === 'number') {\n        id = sprite;\n        sprite = null;\n      } else if (typeof sprite === 'string' && self._state === 'loaded' && !self._sprite[sprite]) {\n        // If the passed sprite doesn't exist, do nothing.\n        return null;\n      } else if (typeof sprite === 'undefined') {\n        // Use the default sound sprite (plays the full audio length).\n        sprite = '__default';\n\n        // Check if there is a single paused sound that isn't ended.\n        // If there is, play that sound. If not, continue as usual.\n        if (!self._playLock) {\n          var num = 0;\n          for (var i=0; i<self._sounds.length; i++) {\n            if (self._sounds[i]._paused && !self._sounds[i]._ended) {\n              num++;\n              id = self._sounds[i]._id;\n            }\n          }\n\n          if (num === 1) {\n            sprite = null;\n          } else {\n            id = null;\n          }\n        }\n      }\n\n      // Get the selected node, or get one from the pool.\n      var sound = id ? self._soundById(id) : self._inactiveSound();\n\n      // If the sound doesn't exist, do nothing.\n      if (!sound) {\n        return null;\n      }\n\n      // Select the sprite definition.\n      if (id && !sprite) {\n        sprite = sound._sprite || '__default';\n      }\n\n      // If the sound hasn't loaded, we must wait to get the audio's duration.\n      // We also need to wait to make sure we don't run into race conditions with\n      // the order of function calls.\n      if (self._state !== 'loaded') {\n        // Set the sprite value on this sound.\n        sound._sprite = sprite;\n\n        // Mark this sound as not ended in case another sound is played before this one loads.\n        sound._ended = false;\n\n        // Add the sound to the queue to be played on load.\n        var soundId = sound._id;\n        self._queue.push({\n          event: 'play',\n          action: function() {\n            self.play(soundId);\n          }\n        });\n\n        return soundId;\n      }\n\n      // Don't play the sound if an id was passed and it is already playing.\n      if (id && !sound._paused) {\n        // Trigger the play event, in order to keep iterating through queue.\n        if (!internal) {\n          self._loadQueue('play');\n        }\n\n        return sound._id;\n      }\n\n      // Make sure the AudioContext isn't suspended, and resume it if it is.\n      if (self._webAudio) {\n        Howler._autoResume();\n      }\n\n      // Determine how long to play for and where to start playing.\n      var seek = Math.max(0, sound._seek > 0 ? sound._seek : self._sprite[sprite][0] / 1000);\n      var duration = Math.max(0, ((self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000) - seek);\n      var timeout = (duration * 1000) / Math.abs(sound._rate);\n      var start = self._sprite[sprite][0] / 1000;\n      var stop = (self._sprite[sprite][0] + self._sprite[sprite][1]) / 1000;\n      sound._sprite = sprite;\n\n      // Mark the sound as ended instantly so that this async playback\n      // doesn't get grabbed by another call to play while this one waits to start.\n      sound._ended = false;\n\n      // Update the parameters of the sound.\n      var setParams = function() {\n        sound._paused = false;\n        sound._seek = seek;\n        sound._start = start;\n        sound._stop = stop;\n        sound._loop = !!(sound._loop || self._sprite[sprite][2]);\n      };\n\n      // End the sound instantly if seek is at the end.\n      if (seek >= stop) {\n        self._ended(sound);\n        return;\n      }\n\n      // Begin the actual playback.\n      var node = sound._node;\n      if (self._webAudio) {\n        // Fire this when the sound is ready to play to begin Web Audio playback.\n        var playWebAudio = function() {\n          self._playLock = false;\n          setParams();\n          self._refreshBuffer(sound);\n\n          // Setup the playback params.\n          var vol = (sound._muted || self._muted) ? 0 : sound._volume;\n          node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n          sound._playStart = Howler.ctx.currentTime;\n\n          // Play the sound using the supported method.\n          if (typeof node.bufferSource.start === 'undefined') {\n            sound._loop ? node.bufferSource.noteGrainOn(0, seek, 86400) : node.bufferSource.noteGrainOn(0, seek, duration);\n          } else {\n            sound._loop ? node.bufferSource.start(0, seek, 86400) : node.bufferSource.start(0, seek, duration);\n          }\n\n          // Start a new timer if none is present.\n          if (timeout !== Infinity) {\n            self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n          }\n\n          if (!internal) {\n            setTimeout(function() {\n              self._emit('play', sound._id);\n              self._loadQueue();\n            }, 0);\n          }\n        };\n\n        if (Howler.state === 'running' && Howler.ctx.state !== 'interrupted') {\n          playWebAudio();\n        } else {\n          self._playLock = true;\n\n          // Wait for the audio context to resume before playing.\n          self.once('resume', playWebAudio);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      } else {\n        // Fire this when the sound is ready to play to begin HTML5 Audio playback.\n        var playHtml5 = function() {\n          node.currentTime = seek;\n          node.muted = sound._muted || self._muted || Howler._muted || node.muted;\n          node.volume = sound._volume * Howler.volume();\n          node.playbackRate = sound._rate;\n\n          // Some browsers will throw an error if this is called without user interaction.\n          try {\n            var play = node.play();\n\n            // Support older browsers that don't support promises, and thus don't have this issue.\n            if (play && typeof Promise !== 'undefined' && (play instanceof Promise || typeof play.then === 'function')) {\n              // Implements a lock to prevent DOMException: The play() request was interrupted by a call to pause().\n              self._playLock = true;\n\n              // Set param values immediately.\n              setParams();\n\n              // Releases the lock and executes queued actions.\n              play\n                .then(function() {\n                  self._playLock = false;\n                  node._unlocked = true;\n                  if (!internal) {\n                    self._emit('play', sound._id);\n                  } else {\n                    self._loadQueue();\n                  }\n                })\n                .catch(function() {\n                  self._playLock = false;\n                  self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                    'on mobile devices and Chrome where playback was not within a user interaction.');\n\n                  // Reset the ended and paused values.\n                  sound._ended = true;\n                  sound._paused = true;\n                });\n            } else if (!internal) {\n              self._playLock = false;\n              setParams();\n              self._emit('play', sound._id);\n            }\n\n            // Setting rate before playing won't work in IE, so we set it again here.\n            node.playbackRate = sound._rate;\n\n            // If the node is still paused, then we can assume there was a playback issue.\n            if (node.paused) {\n              self._emit('playerror', sound._id, 'Playback was unable to start. This is most commonly an issue ' +\n                'on mobile devices and Chrome where playback was not within a user interaction.');\n              return;\n            }\n\n            // Setup the end timer on sprites or listen for the ended event.\n            if (sprite !== '__default' || sound._loop) {\n              self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n            } else {\n              self._endTimers[sound._id] = function() {\n                // Fire ended on this audio node.\n                self._ended(sound);\n\n                // Clear this listener.\n                node.removeEventListener('ended', self._endTimers[sound._id], false);\n              };\n              node.addEventListener('ended', self._endTimers[sound._id], false);\n            }\n          } catch (err) {\n            self._emit('playerror', sound._id, err);\n          }\n        };\n\n        // If this is streaming audio, make sure the src is set and load again.\n        if (node.src === 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA') {\n          node.src = self._src;\n          node.load();\n        }\n\n        // Play immediately if ready, or wait for the 'canplaythrough'e vent.\n        var loadedNoReadyState = (window && window.ejecta) || (!node.readyState && Howler._navigator.isCocoonJS);\n        if (node.readyState >= 3 || loadedNoReadyState) {\n          playHtml5();\n        } else {\n          self._playLock = true;\n          self._state = 'loading';\n\n          var listener = function() {\n            self._state = 'loaded';\n            \n            // Begin playback.\n            playHtml5();\n\n            // Clear this listener.\n            node.removeEventListener(Howler._canPlayEvent, listener, false);\n          };\n          node.addEventListener(Howler._canPlayEvent, listener, false);\n\n          // Cancel the end timer.\n          self._clearTimer(sound._id);\n        }\n      }\n\n      return sound._id;\n    },\n\n    /**\n     * Pause playback and save current position.\n     * @param  {Number} id The sound ID (empty to pause all in group).\n     * @return {Howl}\n     */\n    pause: function(id) {\n      var self = this;\n\n      // If the sound hasn't loaded or a play() promise is pending, add it to the load queue to pause when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'pause',\n          action: function() {\n            self.pause(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be paused.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound && !sound._paused) {\n          // Reset the seek position.\n          sound._seek = self.seek(ids[i]);\n          sound._rateSeek = 0;\n          sound._paused = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound has been created.\n              if (!sound._node.bufferSource) {\n                continue;\n              }\n\n              if (typeof sound._node.bufferSource.stop === 'undefined') {\n                sound._node.bufferSource.noteOff(0);\n              } else {\n                sound._node.bufferSource.stop(0);\n              }\n\n              // Clean up the buffer source.\n              self._cleanBuffer(sound._node);\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.pause();\n            }\n          }\n        }\n\n        // Fire the pause event, unless `true` is passed as the 2nd argument.\n        if (!arguments[1]) {\n          self._emit('pause', sound ? sound._id : null);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Stop playback and reset to start.\n     * @param  {Number} id The sound ID (empty to stop all in group).\n     * @param  {Boolean} internal Internal Use: true prevents event firing.\n     * @return {Howl}\n     */\n    stop: function(id, internal) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to stop when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'stop',\n          action: function() {\n            self.stop(id);\n          }\n        });\n\n        return self;\n      }\n\n      // If no id is passed, get all ID's to be stopped.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Clear the end timer.\n        self._clearTimer(ids[i]);\n\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          // Reset the seek position.\n          sound._seek = sound._start || 0;\n          sound._rateSeek = 0;\n          sound._paused = true;\n          sound._ended = true;\n\n          // Stop currently running fades.\n          self._stopFade(ids[i]);\n\n          if (sound._node) {\n            if (self._webAudio) {\n              // Make sure the sound's AudioBufferSourceNode has been created.\n              if (sound._node.bufferSource) {\n                if (typeof sound._node.bufferSource.stop === 'undefined') {\n                  sound._node.bufferSource.noteOff(0);\n                } else {\n                  sound._node.bufferSource.stop(0);\n                }\n\n                // Clean up the buffer source.\n                self._cleanBuffer(sound._node);\n              }\n            } else if (!isNaN(sound._node.duration) || sound._node.duration === Infinity) {\n              sound._node.currentTime = sound._start || 0;\n              sound._node.pause();\n\n              // If this is a live stream, stop download once the audio is stopped.\n              if (sound._node.duration === Infinity) {\n                self._clearSound(sound._node);\n              }\n            }\n          }\n\n          if (!internal) {\n            self._emit('stop', sound._id);\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Mute/unmute a single sound or all sounds in this Howl group.\n     * @param  {Boolean} muted Set to true to mute and false to unmute.\n     * @param  {Number} id    The sound ID to update (omit to mute/unmute all).\n     * @return {Howl}\n     */\n    mute: function(muted, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to mute when capable.\n      if (self._state !== 'loaded'|| self._playLock) {\n        self._queue.push({\n          event: 'mute',\n          action: function() {\n            self.mute(muted, id);\n          }\n        });\n\n        return self;\n      }\n\n      // If applying mute/unmute to all sounds, update the group's value.\n      if (typeof id === 'undefined') {\n        if (typeof muted === 'boolean') {\n          self._muted = muted;\n        } else {\n          return self._muted;\n        }\n      }\n\n      // If no id is passed, get all ID's to be muted.\n      var ids = self._getSoundIds(id);\n\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._muted = muted;\n\n          // Cancel active fade and set the volume to the end value.\n          if (sound._interval) {\n            self._stopFade(sound._id);\n          }\n\n          if (self._webAudio && sound._node) {\n            sound._node.gain.setValueAtTime(muted ? 0 : sound._volume, Howler.ctx.currentTime);\n          } else if (sound._node) {\n            sound._node.muted = Howler._muted ? true : muted;\n          }\n\n          self._emit('mute', sound._id);\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the volume of this sound or of the Howl group. This method can optionally take 0, 1 or 2 arguments.\n     *   volume() -> Returns the group's volume value.\n     *   volume(id) -> Returns the sound id's current volume.\n     *   volume(vol) -> Sets the volume of all sounds in this Howl group.\n     *   volume(vol, id) -> Sets the volume of passed sound id.\n     * @return {Howl/Number} Returns self or current volume.\n     */\n    volume: function() {\n      var self = this;\n      var args = arguments;\n      var vol, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // Return the value of the groups' volume.\n        return self._volume;\n      } else if (args.length === 1 || args.length === 2 && typeof args[1] === 'undefined') {\n        // First check if this is an ID, and if not, assume it is a new volume.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          vol = parseFloat(args[0]);\n        }\n      } else if (args.length >= 2) {\n        vol = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the volume or return the current volume.\n      var sound;\n      if (typeof vol !== 'undefined' && vol >= 0 && vol <= 1) {\n        // If the sound hasn't loaded, add it to the load queue to change volume when capable.\n        if (self._state !== 'loaded'|| self._playLock) {\n          self._queue.push({\n            event: 'volume',\n            action: function() {\n              self.volume.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group volume.\n        if (typeof id === 'undefined') {\n          self._volume = vol;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            sound._volume = vol;\n\n            // Stop currently running fades.\n            if (!args[2]) {\n              self._stopFade(id[i]);\n            }\n\n            if (self._webAudio && sound._node && !sound._muted) {\n              sound._node.gain.setValueAtTime(vol, Howler.ctx.currentTime);\n            } else if (sound._node && !sound._muted) {\n              sound._node.volume = vol * Howler.volume();\n            }\n\n            self._emit('volume', sound._id);\n          }\n        }\n      } else {\n        sound = id ? self._soundById(id) : self._sounds[0];\n        return sound ? sound._volume : 0;\n      }\n\n      return self;\n    },\n\n    /**\n     * Fade a currently playing sound between two volumes (if no id is passed, all sounds will fade).\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id (omit to fade all sounds).\n     * @return {Howl}\n     */\n    fade: function(from, to, len, id) {\n      var self = this;\n\n      // If the sound hasn't loaded, add it to the load queue to fade when capable.\n      if (self._state !== 'loaded' || self._playLock) {\n        self._queue.push({\n          event: 'fade',\n          action: function() {\n            self.fade(from, to, len, id);\n          }\n        });\n\n        return self;\n      }\n\n      // Make sure the to/from/len values are numbers.\n      from = Math.min(Math.max(0, parseFloat(from)), 1);\n      to = Math.min(Math.max(0, parseFloat(to)), 1);\n      len = parseFloat(len);\n\n      // Set the volume to the start position.\n      self.volume(from, id);\n\n      // Fade the volume of one or all sounds.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        // Get the sound.\n        var sound = self._soundById(ids[i]);\n\n        // Create a linear fade or fall back to timeouts with HTML5 Audio.\n        if (sound) {\n          // Stop the previous fade if no sprite is being used (otherwise, volume handles this).\n          if (!id) {\n            self._stopFade(ids[i]);\n          }\n\n          // If we are using Web Audio, let the native methods do the actual fade.\n          if (self._webAudio && !sound._muted) {\n            var currentTime = Howler.ctx.currentTime;\n            var end = currentTime + (len / 1000);\n            sound._volume = from;\n            sound._node.gain.setValueAtTime(from, currentTime);\n            sound._node.gain.linearRampToValueAtTime(to, end);\n          }\n\n          self._startFadeInterval(sound, from, to, len, ids[i], typeof id === 'undefined');\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Starts the internal interval to fade a sound.\n     * @param  {Object} sound Reference to sound to fade.\n     * @param  {Number} from The value to fade from (0.0 to 1.0).\n     * @param  {Number} to   The volume to fade to (0.0 to 1.0).\n     * @param  {Number} len  Time in milliseconds to fade.\n     * @param  {Number} id   The sound id to fade.\n     * @param  {Boolean} isGroup   If true, set the volume on the group.\n     */\n    _startFadeInterval: function(sound, from, to, len, id, isGroup) {\n      var self = this;\n      var vol = from;\n      var diff = to - from;\n      var steps = Math.abs(diff / 0.01);\n      var stepLen = Math.max(4, (steps > 0) ? len / steps : len);\n      var lastTick = Date.now();\n\n      // Store the value being faded to.\n      sound._fadeTo = to;\n\n      // Update the volume value on each interval tick.\n      sound._interval = setInterval(function() {\n        // Update the volume based on the time since the last tick.\n        var tick = (Date.now() - lastTick) / len;\n        lastTick = Date.now();\n        vol += diff * tick;\n\n        // Round to within 2 decimal points.\n        vol = Math.round(vol * 100) / 100;\n\n        // Make sure the volume is in the right bounds.\n        if (diff < 0) {\n          vol = Math.max(to, vol);\n        } else {\n          vol = Math.min(to, vol);\n        }\n\n        // Change the volume.\n        if (self._webAudio) {\n          sound._volume = vol;\n        } else {\n          self.volume(vol, sound._id, true);\n        }\n\n        // Set the group's volume.\n        if (isGroup) {\n          self._volume = vol;\n        }\n\n        // When the fade is complete, stop it and fire event.\n        if ((to < from && vol <= to) || (to > from && vol >= to)) {\n          clearInterval(sound._interval);\n          sound._interval = null;\n          sound._fadeTo = null;\n          self.volume(to, sound._id);\n          self._emit('fade', sound._id);\n        }\n      }, stepLen);\n    },\n\n    /**\n     * Internal method that stops the currently playing fade when\n     * a new fade starts, volume is changed or the sound is stopped.\n     * @param  {Number} id The sound id.\n     * @return {Howl}\n     */\n    _stopFade: function(id) {\n      var self = this;\n      var sound = self._soundById(id);\n\n      if (sound && sound._interval) {\n        if (self._webAudio) {\n          sound._node.gain.cancelScheduledValues(Howler.ctx.currentTime);\n        }\n\n        clearInterval(sound._interval);\n        sound._interval = null;\n        self.volume(sound._fadeTo, id);\n        sound._fadeTo = null;\n        self._emit('fade', id);\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the loop parameter on a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   loop() -> Returns the group's loop value.\n     *   loop(id) -> Returns the sound id's loop value.\n     *   loop(loop) -> Sets the loop value for all sounds in this Howl group.\n     *   loop(loop, id) -> Sets the loop value of passed sound id.\n     * @return {Howl/Boolean} Returns self or current loop value.\n     */\n    loop: function() {\n      var self = this;\n      var args = arguments;\n      var loop, id, sound;\n\n      // Determine the values for loop and id.\n      if (args.length === 0) {\n        // Return the grou's loop value.\n        return self._loop;\n      } else if (args.length === 1) {\n        if (typeof args[0] === 'boolean') {\n          loop = args[0];\n          self._loop = loop;\n        } else {\n          // Return this sound's loop value.\n          sound = self._soundById(parseInt(args[0], 10));\n          return sound ? sound._loop : false;\n        }\n      } else if (args.length === 2) {\n        loop = args[0];\n        id = parseInt(args[1], 10);\n      }\n\n      // If no id is passed, get all ID's to be looped.\n      var ids = self._getSoundIds(id);\n      for (var i=0; i<ids.length; i++) {\n        sound = self._soundById(ids[i]);\n\n        if (sound) {\n          sound._loop = loop;\n          if (self._webAudio && sound._node && sound._node.bufferSource) {\n            sound._node.bufferSource.loop = loop;\n            if (loop) {\n              sound._node.bufferSource.loopStart = sound._start || 0;\n              sound._node.bufferSource.loopEnd = sound._stop;\n\n              // If playing, restart playback to ensure looping updates.\n              if (self.playing(ids[i])) {\n                self.pause(ids[i], true);\n                self.play(ids[i], true);\n              }\n            }\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the playback rate of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   rate() -> Returns the first sound node's current playback rate.\n     *   rate(id) -> Returns the sound id's current playback rate.\n     *   rate(rate) -> Sets the playback rate of all sounds in this Howl group.\n     *   rate(rate, id) -> Sets the playback rate of passed sound id.\n     * @return {Howl/Number} Returns self or the current playback rate.\n     */\n    rate: function() {\n      var self = this;\n      var args = arguments;\n      var rate, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current rate of the first node.\n        id = self._sounds[0]._id;\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new rate value.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else {\n          rate = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        rate = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // Update the playback rate or return the current value.\n      var sound;\n      if (typeof rate === 'number') {\n        // If the sound hasn't loaded, add it to the load queue to change playback rate when capable.\n        if (self._state !== 'loaded' || self._playLock) {\n          self._queue.push({\n            event: 'rate',\n            action: function() {\n              self.rate.apply(self, args);\n            }\n          });\n\n          return self;\n        }\n\n        // Set the group rate.\n        if (typeof id === 'undefined') {\n          self._rate = rate;\n        }\n\n        // Update one or all volumes.\n        id = self._getSoundIds(id);\n        for (var i=0; i<id.length; i++) {\n          // Get the sound.\n          sound = self._soundById(id[i]);\n\n          if (sound) {\n            // Keep track of our position when the rate changed and update the playback\n            // start position so we can properly adjust the seek position for time elapsed.\n            if (self.playing(id[i])) {\n              sound._rateSeek = self.seek(id[i]);\n              sound._playStart = self._webAudio ? Howler.ctx.currentTime : sound._playStart;\n            }\n            sound._rate = rate;\n\n            // Change the playback rate.\n            if (self._webAudio && sound._node && sound._node.bufferSource) {\n              sound._node.bufferSource.playbackRate.setValueAtTime(rate, Howler.ctx.currentTime);\n            } else if (sound._node) {\n              sound._node.playbackRate = rate;\n            }\n\n            // Reset the timers.\n            var seek = self.seek(id[i]);\n            var duration = ((self._sprite[sound._sprite][0] + self._sprite[sound._sprite][1]) / 1000) - seek;\n            var timeout = (duration * 1000) / Math.abs(sound._rate);\n\n            // Start a new end timer if sound is already playing.\n            if (self._endTimers[id[i]] || !sound._paused) {\n              self._clearTimer(id[i]);\n              self._endTimers[id[i]] = setTimeout(self._ended.bind(self, sound), timeout);\n            }\n\n            self._emit('rate', sound._id);\n          }\n        }\n      } else {\n        sound = self._soundById(id);\n        return sound ? sound._rate : self._rate;\n      }\n\n      return self;\n    },\n\n    /**\n     * Get/set the seek position of a sound. This method can optionally take 0, 1 or 2 arguments.\n     *   seek() -> Returns the first sound node's current seek position.\n     *   seek(id) -> Returns the sound id's current seek position.\n     *   seek(seek) -> Sets the seek position of the first sound node.\n     *   seek(seek, id) -> Sets the seek position of passed sound id.\n     * @return {Howl/Number} Returns self or the current seek position.\n     */\n    seek: function() {\n      var self = this;\n      var args = arguments;\n      var seek, id;\n\n      // Determine the values based on arguments.\n      if (args.length === 0) {\n        // We will simply return the current position of the first node.\n        if (self._sounds.length) {\n          id = self._sounds[0]._id;\n        }\n      } else if (args.length === 1) {\n        // First check if this is an ID, and if not, assume it is a new seek position.\n        var ids = self._getSoundIds();\n        var index = ids.indexOf(args[0]);\n        if (index >= 0) {\n          id = parseInt(args[0], 10);\n        } else if (self._sounds.length) {\n          id = self._sounds[0]._id;\n          seek = parseFloat(args[0]);\n        }\n      } else if (args.length === 2) {\n        seek = parseFloat(args[0]);\n        id = parseInt(args[1], 10);\n      }\n\n      // If there is no ID, bail out.\n      if (typeof id === 'undefined') {\n        return 0;\n      }\n\n      // If the sound hasn't loaded, add it to the load queue to seek when capable.\n      if (typeof seek === 'number' && (self._state !== 'loaded' || self._playLock)) {\n        self._queue.push({\n          event: 'seek',\n          action: function() {\n            self.seek.apply(self, args);\n          }\n        });\n\n        return self;\n      }\n\n      // Get the sound.\n      var sound = self._soundById(id);\n\n      if (sound) {\n        if (typeof seek === 'number' && seek >= 0) {\n          // Pause the sound and update position for restarting playback.\n          var playing = self.playing(id);\n          if (playing) {\n            self.pause(id, true);\n          }\n\n          // Move the position of the track and cancel timer.\n          sound._seek = seek;\n          sound._ended = false;\n          self._clearTimer(id);\n\n          // Update the seek position for HTML5 Audio.\n          if (!self._webAudio && sound._node && !isNaN(sound._node.duration)) {\n            sound._node.currentTime = seek;\n          }\n\n          // Seek and emit when ready.\n          var seekAndEmit = function() {\n            // Restart the playback if the sound was playing.\n            if (playing) {\n              self.play(id, true);\n            }\n\n            self._emit('seek', id);\n          };\n\n          // Wait for the play lock to be unset before emitting (HTML5 Audio).\n          if (playing && !self._webAudio) {\n            var emitSeek = function() {\n              if (!self._playLock) {\n                seekAndEmit();\n              } else {\n                setTimeout(emitSeek, 0);\n              }\n            };\n            setTimeout(emitSeek, 0);\n          } else {\n            seekAndEmit();\n          }\n        } else {\n          if (self._webAudio) {\n            var realTime = self.playing(id) ? Howler.ctx.currentTime - sound._playStart : 0;\n            var rateSeek = sound._rateSeek ? sound._rateSeek - sound._seek : 0;\n            return sound._seek + (rateSeek + realTime * Math.abs(sound._rate));\n          } else {\n            return sound._node.currentTime;\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Check if a specific sound is currently playing or not (if id is provided), or check if at least one of the sounds in the group is playing or not.\n     * @param  {Number}  id The sound id to check. If none is passed, the whole sound group is checked.\n     * @return {Boolean} True if playing and false if not.\n     */\n    playing: function(id) {\n      var self = this;\n\n      // Check the passed sound ID (if any).\n      if (typeof id === 'number') {\n        var sound = self._soundById(id);\n        return sound ? !sound._paused : false;\n      }\n\n      // Otherwise, loop through all sounds and check if any are playing.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (!self._sounds[i]._paused) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n\n    /**\n     * Get the duration of this sound. Passing a sound id will return the sprite duration.\n     * @param  {Number} id The sound id to check. If none is passed, return full source duration.\n     * @return {Number} Audio duration in seconds.\n     */\n    duration: function(id) {\n      var self = this;\n      var duration = self._duration;\n\n      // If we pass an ID, get the sound and return the sprite length.\n      var sound = self._soundById(id);\n      if (sound) {\n        duration = self._sprite[sound._sprite][1] / 1000;\n      }\n\n      return duration;\n    },\n\n    /**\n     * Returns the current loaded state of this Howl.\n     * @return {String} 'unloaded', 'loading', 'loaded'\n     */\n    state: function() {\n      return this._state;\n    },\n\n    /**\n     * Unload and destroy the current Howl object.\n     * This will immediately stop all sound instances attached to this group.\n     */\n    unload: function() {\n      var self = this;\n\n      // Stop playing any active sounds.\n      var sounds = self._sounds;\n      for (var i=0; i<sounds.length; i++) {\n        // Stop the sound if it is currently playing.\n        if (!sounds[i]._paused) {\n          self.stop(sounds[i]._id);\n        }\n\n        // Remove the source or disconnect.\n        if (!self._webAudio) {\n          // Set the source to 0-second silence to stop any downloading (except in IE).\n          self._clearSound(sounds[i]._node);\n\n          // Remove any event listeners.\n          sounds[i]._node.removeEventListener('error', sounds[i]._errorFn, false);\n          sounds[i]._node.removeEventListener(Howler._canPlayEvent, sounds[i]._loadFn, false);\n          sounds[i]._node.removeEventListener('ended', sounds[i]._endFn, false);\n\n          // Release the Audio object back to the pool.\n          Howler._releaseHtml5Audio(sounds[i]._node);\n        }\n\n        // Empty out all of the nodes.\n        delete sounds[i]._node;\n\n        // Make sure all timers are cleared out.\n        self._clearTimer(sounds[i]._id);\n      }\n\n      // Remove the references in the global Howler object.\n      var index = Howler._howls.indexOf(self);\n      if (index >= 0) {\n        Howler._howls.splice(index, 1);\n      }\n\n      // Delete this sound from the cache (if no other Howl is using it).\n      var remCache = true;\n      for (i=0; i<Howler._howls.length; i++) {\n        if (Howler._howls[i]._src === self._src || self._src.indexOf(Howler._howls[i]._src) >= 0) {\n          remCache = false;\n          break;\n        }\n      }\n\n      if (cache && remCache) {\n        delete cache[self._src];\n      }\n\n      // Clear global errors.\n      Howler.noAudio = false;\n\n      // Clear out `self`.\n      self._state = 'unloaded';\n      self._sounds = [];\n      self = null;\n\n      return null;\n    },\n\n    /**\n     * Listen to a custom event.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @param  {Number}   once  (INTERNAL) Marks event to fire only once.\n     * @return {Howl}\n     */\n    on: function(event, fn, id, once) {\n      var self = this;\n      var events = self['_on' + event];\n\n      if (typeof fn === 'function') {\n        events.push(once ? {id: id, fn: fn, once: once} : {id: id, fn: fn});\n      }\n\n      return self;\n    },\n\n    /**\n     * Remove a custom event. Call without parameters to remove all events.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to remove. Leave empty to remove all.\n     * @param  {Number}   id    (optional) Only remove events for this sound.\n     * @return {Howl}\n     */\n    off: function(event, fn, id) {\n      var self = this;\n      var events = self['_on' + event];\n      var i = 0;\n\n      // Allow passing just an event and ID.\n      if (typeof fn === 'number') {\n        id = fn;\n        fn = null;\n      }\n\n      if (fn || id) {\n        // Loop through event store and remove the passed function.\n        for (i=0; i<events.length; i++) {\n          var isId = (id === events[i].id);\n          if (fn === events[i].fn && isId || !fn && isId) {\n            events.splice(i, 1);\n            break;\n          }\n        }\n      } else if (event) {\n        // Clear out all events of this type.\n        self['_on' + event] = [];\n      } else {\n        // Clear out all events of every type.\n        var keys = Object.keys(self);\n        for (i=0; i<keys.length; i++) {\n          if ((keys[i].indexOf('_on') === 0) && Array.isArray(self[keys[i]])) {\n            self[keys[i]] = [];\n          }\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Listen to a custom event and remove it once fired.\n     * @param  {String}   event Event name.\n     * @param  {Function} fn    Listener to call.\n     * @param  {Number}   id    (optional) Only listen to events for this sound.\n     * @return {Howl}\n     */\n    once: function(event, fn, id) {\n      var self = this;\n\n      // Setup the event listener.\n      self.on(event, fn, id, 1);\n\n      return self;\n    },\n\n    /**\n     * Emit all events of a specific type and pass the sound id.\n     * @param  {String} event Event name.\n     * @param  {Number} id    Sound ID.\n     * @param  {Number} msg   Message to go with event.\n     * @return {Howl}\n     */\n    _emit: function(event, id, msg) {\n      var self = this;\n      var events = self['_on' + event];\n\n      // Loop through event store and fire all functions.\n      for (var i=events.length-1; i>=0; i--) {\n        // Only fire the listener if the correct ID is used.\n        if (!events[i].id || events[i].id === id || event === 'load') {\n          setTimeout(function(fn) {\n            fn.call(this, id, msg);\n          }.bind(self, events[i].fn), 0);\n\n          // If this event was setup with `once`, remove it.\n          if (events[i].once) {\n            self.off(event, events[i].fn, events[i].id);\n          }\n        }\n      }\n\n      // Pass the event type into load queue so that it can continue stepping.\n      self._loadQueue(event);\n\n      return self;\n    },\n\n    /**\n     * Queue of actions initiated before the sound has loaded.\n     * These will be called in sequence, with the next only firing\n     * after the previous has finished executing (even if async like play).\n     * @return {Howl}\n     */\n    _loadQueue: function(event) {\n      var self = this;\n\n      if (self._queue.length > 0) {\n        var task = self._queue[0];\n\n        // Remove this task if a matching event was passed.\n        if (task.event === event) {\n          self._queue.shift();\n          self._loadQueue();\n        }\n\n        // Run the task if no event type is passed.\n        if (!event) {\n          task.action();\n        }\n      }\n\n      return self;\n    },\n\n    /**\n     * Fired when playback ends at the end of the duration.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _ended: function(sound) {\n      var self = this;\n      var sprite = sound._sprite;\n\n      // If we are using IE and there was network latency we may be clipping\n      // audio before it completes playing. Lets check the node to make sure it\n      // believes it has completed, before ending the playback.\n      if (!self._webAudio && sound._node && !sound._node.paused && !sound._node.ended && sound._node.currentTime < sound._stop) {\n        setTimeout(self._ended.bind(self, sound), 100);\n        return self;\n      }\n\n      // Should this sound loop?\n      var loop = !!(sound._loop || self._sprite[sprite][2]);\n\n      // Fire the ended event.\n      self._emit('end', sound._id);\n\n      // Restart the playback for HTML5 Audio loop.\n      if (!self._webAudio && loop) {\n        self.stop(sound._id, true).play(sound._id);\n      }\n\n      // Restart this timer if on a Web Audio loop.\n      if (self._webAudio && loop) {\n        self._emit('play', sound._id);\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        sound._playStart = Howler.ctx.currentTime;\n\n        var timeout = ((sound._stop - sound._start) * 1000) / Math.abs(sound._rate);\n        self._endTimers[sound._id] = setTimeout(self._ended.bind(self, sound), timeout);\n      }\n\n      // Mark the node as paused.\n      if (self._webAudio && !loop) {\n        sound._paused = true;\n        sound._ended = true;\n        sound._seek = sound._start || 0;\n        sound._rateSeek = 0;\n        self._clearTimer(sound._id);\n\n        // Clean up the buffer source.\n        self._cleanBuffer(sound._node);\n\n        // Attempt to auto-suspend AudioContext if no sounds are still playing.\n        Howler._autoSuspend();\n      }\n\n      // When using a sprite, end the track.\n      if (!self._webAudio && !loop) {\n        self.stop(sound._id, true);\n      }\n\n      return self;\n    },\n\n    /**\n     * Clear the end timer for a sound playback.\n     * @param  {Number} id The sound ID.\n     * @return {Howl}\n     */\n    _clearTimer: function(id) {\n      var self = this;\n\n      if (self._endTimers[id]) {\n        // Clear the timeout or remove the ended listener.\n        if (typeof self._endTimers[id] !== 'function') {\n          clearTimeout(self._endTimers[id]);\n        } else {\n          var sound = self._soundById(id);\n          if (sound && sound._node) {\n            sound._node.removeEventListener('ended', self._endTimers[id], false);\n          }\n        }\n\n        delete self._endTimers[id];\n      }\n\n      return self;\n    },\n\n    /**\n     * Return the sound identified by this ID, or return null.\n     * @param  {Number} id Sound ID\n     * @return {Object}    Sound object or null.\n     */\n    _soundById: function(id) {\n      var self = this;\n\n      // Loop through all sounds and find the one with this ID.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (id === self._sounds[i]._id) {\n          return self._sounds[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\n     * Return an inactive sound from the pool or create a new one.\n     * @return {Sound} Sound playback object.\n     */\n    _inactiveSound: function() {\n      var self = this;\n\n      self._drain();\n\n      // Find the first inactive node to recycle.\n      for (var i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          return self._sounds[i].reset();\n        }\n      }\n\n      // If no inactive node was found, create a new one.\n      return new Sound(self);\n    },\n\n    /**\n     * Drain excess inactive sounds from the pool.\n     */\n    _drain: function() {\n      var self = this;\n      var limit = self._pool;\n      var cnt = 0;\n      var i = 0;\n\n      // If there are less sounds than the max pool size, we are done.\n      if (self._sounds.length < limit) {\n        return;\n      }\n\n      // Count the number of inactive sounds.\n      for (i=0; i<self._sounds.length; i++) {\n        if (self._sounds[i]._ended) {\n          cnt++;\n        }\n      }\n\n      // Remove excess inactive sounds, going in reverse order.\n      for (i=self._sounds.length - 1; i>=0; i--) {\n        if (cnt <= limit) {\n          return;\n        }\n\n        if (self._sounds[i]._ended) {\n          // Disconnect the audio source when using Web Audio.\n          if (self._webAudio && self._sounds[i]._node) {\n            self._sounds[i]._node.disconnect(0);\n          }\n\n          // Remove sounds until we have the pool size.\n          self._sounds.splice(i, 1);\n          cnt--;\n        }\n      }\n    },\n\n    /**\n     * Get all ID's from the sounds pool.\n     * @param  {Number} id Only return one ID if one is passed.\n     * @return {Array}    Array of IDs.\n     */\n    _getSoundIds: function(id) {\n      var self = this;\n\n      if (typeof id === 'undefined') {\n        var ids = [];\n        for (var i=0; i<self._sounds.length; i++) {\n          ids.push(self._sounds[i]._id);\n        }\n\n        return ids;\n      } else {\n        return [id];\n      }\n    },\n\n    /**\n     * Load the sound back into the buffer source.\n     * @param  {Sound} sound The sound object to work with.\n     * @return {Howl}\n     */\n    _refreshBuffer: function(sound) {\n      var self = this;\n\n      // Setup the buffer source for playback.\n      sound._node.bufferSource = Howler.ctx.createBufferSource();\n      sound._node.bufferSource.buffer = cache[self._src];\n\n      // Connect to the correct node.\n      if (sound._panner) {\n        sound._node.bufferSource.connect(sound._panner);\n      } else {\n        sound._node.bufferSource.connect(sound._node);\n      }\n\n      // Setup looping and playback rate.\n      sound._node.bufferSource.loop = sound._loop;\n      if (sound._loop) {\n        sound._node.bufferSource.loopStart = sound._start || 0;\n        sound._node.bufferSource.loopEnd = sound._stop || 0;\n      }\n      sound._node.bufferSource.playbackRate.setValueAtTime(sound._rate, Howler.ctx.currentTime);\n\n      return self;\n    },\n\n    /**\n     * Prevent memory leaks by cleaning up the buffer source after playback.\n     * @param  {Object} node Sound's audio node containing the buffer source.\n     * @return {Howl}\n     */\n    _cleanBuffer: function(node) {\n      var self = this;\n      var isIOS = Howler._navigator && Howler._navigator.vendor.indexOf('Apple') >= 0;\n\n      if (Howler._scratchBuffer && node.bufferSource) {\n        node.bufferSource.onended = null;\n        node.bufferSource.disconnect(0);\n        if (isIOS) {\n          try { node.bufferSource.buffer = Howler._scratchBuffer; } catch(e) {}\n        }\n      }\n      node.bufferSource = null;\n\n      return self;\n    },\n\n    /**\n     * Set the source to a 0-second silence to stop any downloading (except in IE).\n     * @param  {Object} node Audio node to clear.\n     */\n    _clearSound: function(node) {\n      var checkIE = /MSIE |Trident\\//.test(Howler._navigator && Howler._navigator.userAgent);\n      if (!checkIE) {\n        node.src = 'data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA';\n      }\n    }\n  };\n\n  /** Single Sound Methods **/\n  /***************************************************************************/\n\n  /**\n   * Setup the sound object, which each node attached to a Howl group is contained in.\n   * @param {Object} howl The Howl parent group.\n   */\n  var Sound = function(howl) {\n    this._parent = howl;\n    this.init();\n  };\n  Sound.prototype = {\n    /**\n     * Initialize a new Sound object.\n     * @return {Sound}\n     */\n    init: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Setup the default parameters.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a unique ID for this sound.\n      self._id = ++Howler._counter;\n\n      // Add itself to the parent's pool.\n      parent._sounds.push(self);\n\n      // Create the new node.\n      self.create();\n\n      return self;\n    },\n\n    /**\n     * Create and setup a new sound object, whether HTML5 Audio or Web Audio.\n     * @return {Sound}\n     */\n    create: function() {\n      var self = this;\n      var parent = self._parent;\n      var volume = (Howler._muted || self._muted || self._parent._muted) ? 0 : self._volume;\n\n      if (parent._webAudio) {\n        // Create the gain node for controlling volume (the source will connect to this).\n        self._node = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n        self._node.gain.setValueAtTime(volume, Howler.ctx.currentTime);\n        self._node.paused = true;\n        self._node.connect(Howler.masterGain);\n      } else if (!Howler.noAudio) {\n        // Get an unlocked Audio object from the pool.\n        self._node = Howler._obtainHtml5Audio();\n\n        // Listen for errors (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror).\n        self._errorFn = self._errorListener.bind(self);\n        self._node.addEventListener('error', self._errorFn, false);\n\n        // Listen for 'canplaythrough' event to let us know the sound is ready.\n        self._loadFn = self._loadListener.bind(self);\n        self._node.addEventListener(Howler._canPlayEvent, self._loadFn, false);\n\n        // Listen for the 'ended' event on the sound to account for edge-case where\n        // a finite sound has a duration of Infinity.\n        self._endFn = self._endListener.bind(self);\n        self._node.addEventListener('ended', self._endFn, false);\n\n        // Setup the new audio node.\n        self._node.src = parent._src;\n        self._node.preload = parent._preload === true ? 'auto' : parent._preload;\n        self._node.volume = volume * Howler.volume();\n\n        // Begin loading the source.\n        self._node.load();\n      }\n\n      return self;\n    },\n\n    /**\n     * Reset the parameters of this sound to the original state (for recycle).\n     * @return {Sound}\n     */\n    reset: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Reset all of the parameters of this sound.\n      self._muted = parent._muted;\n      self._loop = parent._loop;\n      self._volume = parent._volume;\n      self._rate = parent._rate;\n      self._seek = 0;\n      self._rateSeek = 0;\n      self._paused = true;\n      self._ended = true;\n      self._sprite = '__default';\n\n      // Generate a new ID so that it isn't confused with the previous sound.\n      self._id = ++Howler._counter;\n\n      return self;\n    },\n\n    /**\n     * HTML5 Audio error listener callback.\n     */\n    _errorListener: function() {\n      var self = this;\n\n      // Fire an error event and pass back the code.\n      self._parent._emit('loaderror', self._id, self._node.error ? self._node.error.code : 0);\n\n      // Clear the event listener.\n      self._node.removeEventListener('error', self._errorFn, false);\n    },\n\n    /**\n     * HTML5 Audio canplaythrough listener callback.\n     */\n    _loadListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Round up the duration to account for the lower precision in HTML5 Audio.\n      parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n      // Setup a sprite if none is defined.\n      if (Object.keys(parent._sprite).length === 0) {\n        parent._sprite = {__default: [0, parent._duration * 1000]};\n      }\n\n      if (parent._state !== 'loaded') {\n        parent._state = 'loaded';\n        parent._emit('load');\n        parent._loadQueue();\n      }\n\n      // Clear the event listener.\n      self._node.removeEventListener(Howler._canPlayEvent, self._loadFn, false);\n    },\n\n    /**\n     * HTML5 Audio ended listener callback.\n     */\n    _endListener: function() {\n      var self = this;\n      var parent = self._parent;\n\n      // Only handle the `ended`` event if the duration is Infinity.\n      if (parent._duration === Infinity) {\n        // Update the parent duration to match the real audio duration.\n        // Round up the duration to account for the lower precision in HTML5 Audio.\n        parent._duration = Math.ceil(self._node.duration * 10) / 10;\n\n        // Update the sprite that corresponds to the real duration.\n        if (parent._sprite.__default[1] === Infinity) {\n          parent._sprite.__default[1] = parent._duration * 1000;\n        }\n\n        // Run the regular ended method.\n        parent._ended(self);\n      }\n\n      // Clear the event listener since the duration is now correct.\n      self._node.removeEventListener('ended', self._endFn, false);\n    }\n  };\n\n  /** Helper Methods **/\n  /***************************************************************************/\n\n  var cache = {};\n\n  /**\n   * Buffer a sound from URL, Data URI or cache and decode to audio source (Web Audio API).\n   * @param  {Howl} self\n   */\n  var loadBuffer = function(self) {\n    var url = self._src;\n\n    // Check if the buffer has already been cached and use it instead.\n    if (cache[url]) {\n      // Set the duration from the cache.\n      self._duration = cache[url].duration;\n\n      // Load the sound into this Howl.\n      loadSound(self);\n\n      return;\n    }\n\n    if (/^data:[^;]+;base64,/.test(url)) {\n      // Decode the base64 data URI without XHR, since some browsers don't support it.\n      var data = atob(url.split(',')[1]);\n      var dataView = new Uint8Array(data.length);\n      for (var i=0; i<data.length; ++i) {\n        dataView[i] = data.charCodeAt(i);\n      }\n\n      decodeAudioData(dataView.buffer, self);\n    } else {\n      // Load the buffer from the URL.\n      var xhr = new XMLHttpRequest();\n      xhr.open(self._xhr.method, url, true);\n      xhr.withCredentials = self._xhr.withCredentials;\n      xhr.responseType = 'arraybuffer';\n\n      // Apply any custom headers to the request.\n      if (self._xhr.headers) {\n        Object.keys(self._xhr.headers).forEach(function(key) {\n          xhr.setRequestHeader(key, self._xhr.headers[key]);\n        });\n      }\n\n      xhr.onload = function() {\n        // Make sure we get a successful response back.\n        var code = (xhr.status + '')[0];\n        if (code !== '0' && code !== '2' && code !== '3') {\n          self._emit('loaderror', null, 'Failed loading audio file with status: ' + xhr.status + '.');\n          return;\n        }\n\n        decodeAudioData(xhr.response, self);\n      };\n      xhr.onerror = function() {\n        // If there is an error, switch to HTML5 Audio.\n        if (self._webAudio) {\n          self._html5 = true;\n          self._webAudio = false;\n          self._sounds = [];\n          delete cache[url];\n          self.load();\n        }\n      };\n      safeXhrSend(xhr);\n    }\n  };\n\n  /**\n   * Send the XHR request wrapped in a try/catch.\n   * @param  {Object} xhr XHR to send.\n   */\n  var safeXhrSend = function(xhr) {\n    try {\n      xhr.send();\n    } catch (e) {\n      xhr.onerror();\n    }\n  };\n\n  /**\n   * Decode audio data from an array buffer.\n   * @param  {ArrayBuffer} arraybuffer The audio data.\n   * @param  {Howl}        self\n   */\n  var decodeAudioData = function(arraybuffer, self) {\n    // Fire a load error if something broke.\n    var error = function() {\n      self._emit('loaderror', null, 'Decoding audio data failed.');\n    };\n\n    // Load the sound on success.\n    var success = function(buffer) {\n      if (buffer && self._sounds.length > 0) {\n        cache[self._src] = buffer;\n        loadSound(self, buffer);\n      } else {\n        error();\n      }\n    };\n\n    // Decode the buffer into an audio source.\n    if (typeof Promise !== 'undefined' && Howler.ctx.decodeAudioData.length === 1) {\n      Howler.ctx.decodeAudioData(arraybuffer).then(success).catch(error);\n    } else {\n      Howler.ctx.decodeAudioData(arraybuffer, success, error);\n    }\n  }\n\n  /**\n   * Sound is now loaded, so finish setting everything up and fire the loaded event.\n   * @param  {Howl} self\n   * @param  {Object} buffer The decoded buffer sound source.\n   */\n  var loadSound = function(self, buffer) {\n    // Set the duration.\n    if (buffer && !self._duration) {\n      self._duration = buffer.duration;\n    }\n\n    // Setup a sprite if none is defined.\n    if (Object.keys(self._sprite).length === 0) {\n      self._sprite = {__default: [0, self._duration * 1000]};\n    }\n\n    // Fire the loaded event.\n    if (self._state !== 'loaded') {\n      self._state = 'loaded';\n      self._emit('load');\n      self._loadQueue();\n    }\n  };\n\n  /**\n   * Setup the audio context when available, or switch to HTML5 Audio mode.\n   */\n  var setupAudioContext = function() {\n    // If we have already detected that Web Audio isn't supported, don't run this step again.\n    if (!Howler.usingWebAudio) {\n      return;\n    }\n\n    // Check if we are using Web Audio and setup the AudioContext if we are.\n    try {\n      if (typeof AudioContext !== 'undefined') {\n        Howler.ctx = new AudioContext();\n      } else if (typeof webkitAudioContext !== 'undefined') {\n        Howler.ctx = new webkitAudioContext();\n      } else {\n        Howler.usingWebAudio = false;\n      }\n    } catch(e) {\n      Howler.usingWebAudio = false;\n    }\n\n    // If the audio context creation still failed, set using web audio to false.\n    if (!Howler.ctx) {\n      Howler.usingWebAudio = false;\n    }\n\n    // Check if a webview is being used on iOS8 or earlier (rather than the browser).\n    // If it is, disable Web Audio as it causes crashing.\n    var iOS = (/iP(hone|od|ad)/.test(Howler._navigator && Howler._navigator.platform));\n    var appVersion = Howler._navigator && Howler._navigator.appVersion.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\n    var version = appVersion ? parseInt(appVersion[1], 10) : null;\n    if (iOS && version && version < 9) {\n      var safari = /safari/.test(Howler._navigator && Howler._navigator.userAgent.toLowerCase());\n      if (Howler._navigator && !safari) {\n        Howler.usingWebAudio = false;\n      }\n    }\n\n    // Create and expose the master GainNode when using Web Audio (useful for plugins or advanced usage).\n    if (Howler.usingWebAudio) {\n      Howler.masterGain = (typeof Howler.ctx.createGain === 'undefined') ? Howler.ctx.createGainNode() : Howler.ctx.createGain();\n      Howler.masterGain.gain.setValueAtTime(Howler._muted ? 0 : Howler._volume, Howler.ctx.currentTime);\n      Howler.masterGain.connect(Howler.ctx.destination);\n    }\n\n    // Re-run the setup on Howler.\n    Howler._setup();\n  };\n\n  // Add support for AMD (Asynchronous Module Definition) libraries such as require.js.\n  if (typeof define === 'function' && define.amd) {\n    define([], function() {\n      return {\n        Howler: Howler,\n        Howl: Howl\n      };\n    });\n  }\n\n  // Add support for CommonJS libraries such as browserify.\n  if (typeof exports !== 'undefined') {\n    exports.Howler = Howler;\n    exports.Howl = Howl;\n  }\n\n  // Add to global in Node.js (for testing, etc).\n  if (typeof global !== 'undefined') {\n    global.HowlerGlobal = HowlerGlobal;\n    global.Howler = Howler;\n    global.Howl = Howl;\n    global.Sound = Sound;\n  } else if (typeof window !== 'undefined') {  // Define globally in case AMD is not available or unused.\n    window.HowlerGlobal = HowlerGlobal;\n    window.Howler = Howler;\n    window.Howl = Howl;\n    window.Sound = Sound;\n  }\n})();\n","module.exports = require('./helpers/bundle-url').getBundleURL('apLFO') + require('./helpers/bundle-manifest').resolve(\"aYBuu\");","\"use strict\";\n\nvar bundleURL = {};\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n  return value;\n}\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n  return '/';\n}\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\n// TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz|safari-web)-extension):\\/\\/[^/]+/);\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n  return matches[0];\n}\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n"],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","Module","call","exports","x","res","id","moduleName","bundle","isParcelRequire","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","parcelHelpers","_mousetrap","_mousetrapDefault","interopDefault","_howlerCore","thisYear","Date","getFullYear","careerStart","yearsExperience","document","getElementById","innerText","soundFile","URL","sound","Howl","src","html5","runtime","R","I","O","T","G","a","m","e","s","H","N","setTimeout","o","i1","b1","c1","substring","onkeydown","e1","V","keyCode","ontouchstart","t1","W","changedTouches","item","screenX","screen","width","Y","m1","a1","map","h","f","C","L","M","_1","Math","floor","random","Q","P1","Array","join","p","l","S","A","push","P","split","g","q","F","D","J","z","b","v","K","d","_","c","r","u","w","U","charCodeAt","E","y","eval","toggleGame","play","treeElem1","oElem1","classList","contains","add","remove","toggle","volume","default","preventDefault","returnValue","addEventListener","window1","document1","undefined","_REVERSE_MAP","_MAP","_KEYCODE_MAP","_SHIFT_MAP","_SPECIAL_ALIASES","test","navigator","platform","toString","Mousetrap","prototype","keys","callback","action","_bindMultiple","unbind","trigger","_directMap","reset","_callbacks","stopCallback","element","className","indexOf","_belongsTo","target","composedPath","initialEventTarget","tagName","isContentEditable","handleKey","_handleKey","apply","arguments","addKeycodes","object","key","hasOwnProperty","init","documentMousetrap","method","charAt","_addEvent","type","attachEvent","_characterFromEvent","character","String","fromCharCode","which","shiftKey","toLowerCase","_modifiersMatch","modifiers1","modifiers2","sort","_eventModifiers","modifiers","altKey","ctrlKey","metaKey","_preventDefault","_stopPropagation","stopPropagation","cancelBubble","_isModifier","_getReverseMap","_pickBestAction","_keysFromString","combination","replace","_getKeyInfo","ancestor","parentNode","targetElement","_resetTimer","_sequenceLevels","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_resetSequences","doNotReset","activeSequences","_getMatches","sequenceName","level","matches","seq","deleteCombo","combo","deleteSequence","splice","_fireCallback","sequence","srcElement","_handleKeyEvent","_resetSequenceTimer","clearTimeout","_bindSequence","_increaseSequence","nextAction","_callbackAndReset","wrappedCallback","isFinal","_bindSingle","info","callbacks","maxLevel","processedSequenceCallback","max","ignoreThisKeypress","combinations","HowlerGlobal","Howler","_counter","_html5AudioPool","html5PoolSize","_codecs","_howls","_muted","_volume","_canPlayEvent","_navigator","masterGain","noAudio","usingWebAudio","autoSuspend","ctx","autoUnlock","_setup","vol","parseFloat","setupAudioContext","gain","setValueAtTime","currentTime","_webAudio","ids","_getSoundIds","j","_soundById","_node","mute","muted","stop","unload","close","codecs","ext","state","_autoSuspend","Audio","oncanplaythrough","_setupCodecs","audioTest","canPlayType","mpegTest","ua","userAgent","checkOpera","match","isOldOpera","parseInt","checkSafari","safariVersion","isOldSafari","mp3","mpeg","opus","ogg","oga","wav","aac","caf","m4a","m4b","mp4","weba","webm","dolby","flac","_unlockAudio","_audioUnlocked","_mobileUnloaded","sampleRate","_scratchBuffer","createBuffer","unlock","audioNode","_unlocked","_releaseHtml5Audio","load","_autoResume","source","createBufferSource","buffer","connect","destination","start","noteOn","resume","onended","disconnect","removeEventListener","_emit","_obtainHtml5Audio","pop","testPlay","Promise","then","catch","console","warn","audio","suspend","_sounds","_paused","_suspendTimer","handleSuspension","_resumeAfterSuspend","error","_autoplay","autoplay","_format","format","_html5","_loop","loop","_pool","pool","_preload","preload","_rate","rate","_sprite","sprite","_src","_xhr","xhr","headers","withCredentials","_duration","_state","_endTimers","_queue","_playLock","_onend","onend","fn","_onfade","onfade","_onload","onload","_onloaderror","onloaderror","_onplayerror","onplayerror","_onpause","onpause","_onplay","onplay","_onstop","onstop","_onmute","onmute","_onvolume","onvolume","_onrate","onrate","_onseek","onseek","_onunlock","onunlock","_onresume","event","str","url","exec","location","protocol","slice","Sound","loadBuffer","internal","num","_ended","_id","_inactiveSound","soundId","_loadQueue","seek","_seek","duration","timeout","abs","setParams","_start","_stop","node","playWebAudio","_refreshBuffer","_playStart","bufferSource","noteGrainOn","Infinity","once","_clearTimer","playHtml5","playbackRate","paused","loadedNoReadyState","ejecta","readyState","isCocoonJS","listener","pause","_rateSeek","_stopFade","noteOff","_cleanBuffer","isNaN","_clearSound","_interval","args","index","fade","from","to","len","min","end","linearRampToValueAtTime","_startFadeInterval","isGroup","diff","steps","stepLen","lastTick","now","_fadeTo","setInterval","tick","round","clearInterval","cancelScheduledValues","loopStart","loopEnd","playing","seekAndEmit","emitSeek","realTime","rateSeek","sounds","_errorFn","_loadFn","_endFn","remCache","on","events","off","isId","isArray","msg","task","shift","ended","_drain","limit","cnt","_panner","isIOS","vendor","howl","_parent","create","createGain","createGainNode","_errorListener","_loadListener","_endListener","ceil","__default","loadSound","data","atob","dataView","Uint8Array","decodeAudioData","XMLHttpRequest","open","responseType","forEach","setRequestHeader","status","response","onerror","safeXhrSend","send","arraybuffer","success","AudioContext","webkitAudioContext","iOS","appVersion","version","safari","getBundleURL","bundleURL","getBundleURLCached","value","stack","getBaseURL","getOrigin","__esModule","defineInteropFlag","exportAll","dest","enumerable","export","destName"],"version":3,"file":"citadel-accomp.483a913a.js.map"}